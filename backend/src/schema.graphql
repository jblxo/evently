# import * from './generated/prisma.graphql'

type SuccessMessage {
  message: String
}

type Mutation {
  createEvent(
    address1: String!
    address2: String
    address3: String
    city: String!
    country: String!
    description: String
    entranceTax: Int
    eventDate: DateTime!
    imageLarge: String
    imageSmall: String
    state: String!
    title: String!
    zip: String!
    boards: BoardCreateManyWithoutEventInput
  ): Event!
  updateEvent(
    id: Int!
    address1: String
    address2: String
    address3: String
    city: String
    country: String
    description: String
    entranceTax: Int
    eventDate: DateTime
    imageLarge: String
    imageSmall: String
    state: String
    title: String
    zip: String
  ): Event
  signup(
    email: String!
    firstName: String!
    lastName: String!
    password: String!
    confirmPassword: String!
    username: String!
  ): User!
  signin(email: String!, password: String!): User
  signout: SuccessMessage
  updateUser(
    id: Int!
    email: String
    username: String
    firstName: String
    lastName: String
  ): User
  updateEventAdmins(permissions: [String], userId: Int!, eventId: Int!): User
  deleteEvent(id: Int!): Event
  joinEvent(id: Int!): EventAdmin
  createBoard(id: Int!, title: String!, description: String): Board!
  addList(description: String, title: String!, event: Int!, board: Int!): List!
  addCard(description: String, title: String!, event: Int!, list: Int!): Card!
  updateList(id: Int!, description: String, title: String!, event: Int!): List
  deleteList(id: Int!, event: Int!): List
  deleteCard(id: Int!, event: Int!, list: Int!): Card
  reorderCards(
    card: Int!
    destinationList: Int!
    sourceList: Int!
    destinationOrder: Int!
    sourceOrder: Int!
  ): Card
  updateCard(id: Int!, title: String, description: String, event: Int!): Card
  deleteBoard(id: Int!, event: Int!): Board
  updateBoard(id: Int!, title: String, description: String, event: Int!): Board
  createExpense(
    amount: Float!
    description: String
    event: Int!
    title: String!
  ): Expense!
}

type Query {
  event(where: EventWhereUniqueInput!): Event
  events(
    where: EventWhereInput
    orderBy: EventOrderByInput
    skip: Int
    first: Int
  ): [Event]!
  eventsConnection(where: EventWhereInput): EventConnection!
  me: User
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput): [User]!
  eventAdmins(where: EventAdminWhereInput): [EventAdmin]!
  board(where: BoardWhereUniqueInput!): Board
  card(where: CardWhereUniqueInput!): Card
}
