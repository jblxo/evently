# source: http://localhost:4466
# timestamp: Thu Apr 04 2019 13:24:10 GMT+0200 (GMT+02:00)

type AggregateBoard {
  count: Int!
}

type AggregateCard {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateEventAdmin {
  count: Int!
}

type AggregateExpense {
  count: Int!
}

type AggregateList {
  count: Int!
}

type AggregatePermission {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Board {
  id: Int!
  description: String
  event: Event
  lists(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [List!]
  title: String!
}

"""A connection to a list of items."""
type BoardConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BoardEdge]!
  aggregate: AggregateBoard!
}

input BoardCreateInput {
  description: String
  title: String!
  event: EventCreateOneWithoutBoardsInput
  lists: ListCreateManyWithoutBoardInput
}

input BoardCreateManyWithoutEventInput {
  create: [BoardCreateWithoutEventInput!]
  connect: [BoardWhereUniqueInput!]
}

input BoardCreateOneWithoutListsInput {
  create: BoardCreateWithoutListsInput
  connect: BoardWhereUniqueInput
}

input BoardCreateWithoutEventInput {
  description: String
  title: String!
  lists: ListCreateManyWithoutBoardInput
}

input BoardCreateWithoutListsInput {
  description: String
  title: String!
  event: EventCreateOneWithoutBoardsInput
}

"""An edge in a connection."""
type BoardEdge {
  """The item at the end of the edge."""
  node: Board!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BoardOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  title_ASC
  title_DESC
}

type BoardPreviousValues {
  id: Int!
  description: String
  title: String!
}

type BoardSubscriptionPayload {
  mutation: MutationType!
  node: Board
  updatedFields: [String!]
  previousValues: BoardPreviousValues
}

input BoardSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BoardSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BoardSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BoardSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BoardWhereInput
}

input BoardUpdateInput {
  description: String
  title: String
  event: EventUpdateOneWithoutBoardsInput
  lists: ListUpdateManyWithoutBoardInput
}

input BoardUpdateManyMutationInput {
  description: String
  title: String
}

input BoardUpdateManyWithoutEventInput {
  create: [BoardCreateWithoutEventInput!]
  connect: [BoardWhereUniqueInput!]
  disconnect: [BoardWhereUniqueInput!]
  delete: [BoardWhereUniqueInput!]
  update: [BoardUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [BoardUpsertWithWhereUniqueWithoutEventInput!]
}

input BoardUpdateOneWithoutListsInput {
  create: BoardCreateWithoutListsInput
  connect: BoardWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BoardUpdateWithoutListsDataInput
  upsert: BoardUpsertWithoutListsInput
}

input BoardUpdateWithoutEventDataInput {
  description: String
  title: String
  lists: ListUpdateManyWithoutBoardInput
}

input BoardUpdateWithoutListsDataInput {
  description: String
  title: String
  event: EventUpdateOneWithoutBoardsInput
}

input BoardUpdateWithWhereUniqueWithoutEventInput {
  where: BoardWhereUniqueInput!
  data: BoardUpdateWithoutEventDataInput!
}

input BoardUpsertWithoutListsInput {
  update: BoardUpdateWithoutListsDataInput!
  create: BoardCreateWithoutListsInput!
}

input BoardUpsertWithWhereUniqueWithoutEventInput {
  where: BoardWhereUniqueInput!
  update: BoardUpdateWithoutEventDataInput!
  create: BoardCreateWithoutEventInput!
}

input BoardWhereInput {
  """Logical AND on all given filters."""
  AND: [BoardWhereInput!]

  """Logical OR on all given filters."""
  OR: [BoardWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BoardWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  event: EventWhereInput
  lists_every: ListWhereInput
  lists_some: ListWhereInput
  lists_none: ListWhereInput
}

input BoardWhereUniqueInput {
  id: Int
}

type Card {
  id: Int!
  assignedUser: User
  createdAt: DateTime!
  description: String
  list: List
  order: Int!
  title: String!
  user: User
}

"""A connection to a list of items."""
type CardConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CardEdge]!
  aggregate: AggregateCard!
}

input CardCreateInput {
  description: String
  order: Int!
  title: String!
  assignedUser: UserCreateOneWithoutCards_assignedUsersInput
  list: ListCreateOneWithoutCardsInput
  user: UserCreateOneWithoutCards_usersInput
}

input CardCreateManyWithoutAssignedUserInput {
  create: [CardCreateWithoutAssignedUserInput!]
  connect: [CardWhereUniqueInput!]
}

input CardCreateManyWithoutListInput {
  create: [CardCreateWithoutListInput!]
  connect: [CardWhereUniqueInput!]
}

input CardCreateManyWithoutUserInput {
  create: [CardCreateWithoutUserInput!]
  connect: [CardWhereUniqueInput!]
}

input CardCreateWithoutAssignedUserInput {
  description: String
  order: Int!
  title: String!
  list: ListCreateOneWithoutCardsInput
  user: UserCreateOneWithoutCards_usersInput
}

input CardCreateWithoutListInput {
  description: String
  order: Int!
  title: String!
  assignedUser: UserCreateOneWithoutCards_assignedUsersInput
  user: UserCreateOneWithoutCards_usersInput
}

input CardCreateWithoutUserInput {
  description: String
  order: Int!
  title: String!
  assignedUser: UserCreateOneWithoutCards_assignedUsersInput
  list: ListCreateOneWithoutCardsInput
}

"""An edge in a connection."""
type CardEdge {
  """The item at the end of the edge."""
  node: Card!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CardOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  order_ASC
  order_DESC
  title_ASC
  title_DESC
}

type CardPreviousValues {
  id: Int!
  createdAt: DateTime!
  description: String
  order: Int!
  title: String!
}

type CardSubscriptionPayload {
  mutation: MutationType!
  node: Card
  updatedFields: [String!]
  previousValues: CardPreviousValues
}

input CardSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CardSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CardSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CardSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CardWhereInput
}

input CardUpdateInput {
  description: String
  order: Int
  title: String
  assignedUser: UserUpdateOneWithoutCards_assignedUsersInput
  list: ListUpdateOneWithoutCardsInput
  user: UserUpdateOneWithoutCards_usersInput
}

input CardUpdateManyMutationInput {
  description: String
  order: Int
  title: String
}

input CardUpdateManyWithoutAssignedUserInput {
  create: [CardCreateWithoutAssignedUserInput!]
  connect: [CardWhereUniqueInput!]
  disconnect: [CardWhereUniqueInput!]
  delete: [CardWhereUniqueInput!]
  update: [CardUpdateWithWhereUniqueWithoutAssignedUserInput!]
  upsert: [CardUpsertWithWhereUniqueWithoutAssignedUserInput!]
}

input CardUpdateManyWithoutListInput {
  create: [CardCreateWithoutListInput!]
  connect: [CardWhereUniqueInput!]
  disconnect: [CardWhereUniqueInput!]
  delete: [CardWhereUniqueInput!]
  update: [CardUpdateWithWhereUniqueWithoutListInput!]
  upsert: [CardUpsertWithWhereUniqueWithoutListInput!]
}

input CardUpdateManyWithoutUserInput {
  create: [CardCreateWithoutUserInput!]
  connect: [CardWhereUniqueInput!]
  disconnect: [CardWhereUniqueInput!]
  delete: [CardWhereUniqueInput!]
  update: [CardUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CardUpsertWithWhereUniqueWithoutUserInput!]
}

input CardUpdateWithoutAssignedUserDataInput {
  description: String
  order: Int
  title: String
  list: ListUpdateOneWithoutCardsInput
  user: UserUpdateOneWithoutCards_usersInput
}

input CardUpdateWithoutListDataInput {
  description: String
  order: Int
  title: String
  assignedUser: UserUpdateOneWithoutCards_assignedUsersInput
  user: UserUpdateOneWithoutCards_usersInput
}

input CardUpdateWithoutUserDataInput {
  description: String
  order: Int
  title: String
  assignedUser: UserUpdateOneWithoutCards_assignedUsersInput
  list: ListUpdateOneWithoutCardsInput
}

input CardUpdateWithWhereUniqueWithoutAssignedUserInput {
  where: CardWhereUniqueInput!
  data: CardUpdateWithoutAssignedUserDataInput!
}

input CardUpdateWithWhereUniqueWithoutListInput {
  where: CardWhereUniqueInput!
  data: CardUpdateWithoutListDataInput!
}

input CardUpdateWithWhereUniqueWithoutUserInput {
  where: CardWhereUniqueInput!
  data: CardUpdateWithoutUserDataInput!
}

input CardUpsertWithWhereUniqueWithoutAssignedUserInput {
  where: CardWhereUniqueInput!
  update: CardUpdateWithoutAssignedUserDataInput!
  create: CardCreateWithoutAssignedUserInput!
}

input CardUpsertWithWhereUniqueWithoutListInput {
  where: CardWhereUniqueInput!
  update: CardUpdateWithoutListDataInput!
  create: CardCreateWithoutListInput!
}

input CardUpsertWithWhereUniqueWithoutUserInput {
  where: CardWhereUniqueInput!
  update: CardUpdateWithoutUserDataInput!
  create: CardCreateWithoutUserInput!
}

input CardWhereInput {
  """Logical AND on all given filters."""
  AND: [CardWhereInput!]

  """Logical OR on all given filters."""
  OR: [CardWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CardWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  order: Int

  """All values that are not equal to given value."""
  order_not: Int

  """All values that are contained in given list."""
  order_in: [Int!]

  """All values that are not contained in given list."""
  order_not_in: [Int!]

  """All values less than the given value."""
  order_lt: Int

  """All values less than or equal the given value."""
  order_lte: Int

  """All values greater than the given value."""
  order_gt: Int

  """All values greater than or equal the given value."""
  order_gte: Int
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  assignedUser: UserWhereInput
  list: ListWhereInput
  user: UserWhereInput
}

input CardWhereUniqueInput {
  id: Int
}

type Comment {
  id: Int!
  content: String!
  createdAt: DateTime!
  event: Event
  user: User
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  content: String!
  event: EventCreateOneWithoutCommentsInput
  user: UserCreateOneWithoutCommentsInput
}

input CommentCreateManyWithoutEventInput {
  create: [CommentCreateWithoutEventInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutEventInput {
  content: String!
  user: UserCreateOneWithoutCommentsInput
}

input CommentCreateWithoutUserInput {
  content: String!
  event: EventCreateOneWithoutCommentsInput
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommentPreviousValues {
  id: Int!
  content: String!
  createdAt: DateTime!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateInput {
  content: String
  event: EventUpdateOneWithoutCommentsInput
  user: UserUpdateOneWithoutCommentsInput
}

input CommentUpdateManyMutationInput {
  content: String
}

input CommentUpdateManyWithoutEventInput {
  create: [CommentCreateWithoutEventInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutEventInput!]
}

input CommentUpdateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
}

input CommentUpdateWithoutEventDataInput {
  content: String
  user: UserUpdateOneWithoutCommentsInput
}

input CommentUpdateWithoutUserDataInput {
  content: String
  event: EventUpdateOneWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutEventInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutEventDataInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutUserDataInput!
}

input CommentUpsertWithWhereUniqueWithoutEventInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutEventDataInput!
  create: CommentCreateWithoutEventInput!
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutUserDataInput!
  create: CommentCreateWithoutUserInput!
}

input CommentWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  event: EventWhereInput
  user: UserWhereInput
}

input CommentWhereUniqueInput {
  id: Int
}

scalar DateTime

type Event {
  id: Int!
  address1: String!
  address2: String
  address3: String
  boards(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board!]
  city: String!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  country: String!
  createdAt: DateTime!
  description: String
  entranceTax: Int
  eventAdmins(where: EventAdminWhereInput, orderBy: EventAdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventAdmin!]
  eventDate: DateTime!
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense!]
  imageLarge: String
  imageSmall: String
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  state: String!
  title: String!
  zip: String!
}

type EventAdmin {
  id: Int!
  event: Event
  permission: Permission
  user: User
}

"""A connection to a list of items."""
type EventAdminConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventAdminEdge]!
  aggregate: AggregateEventAdmin!
}

input EventAdminCreateInput {
  event: EventCreateOneWithoutEventAdminsInput
  permission: PermissionCreateOneWithoutEventAdminsInput
  user: UserCreateOneWithoutEventAdminsInput
}

input EventAdminCreateManyWithoutEventInput {
  create: [EventAdminCreateWithoutEventInput!]
  connect: [EventAdminWhereUniqueInput!]
}

input EventAdminCreateManyWithoutPermissionInput {
  create: [EventAdminCreateWithoutPermissionInput!]
  connect: [EventAdminWhereUniqueInput!]
}

input EventAdminCreateManyWithoutUserInput {
  create: [EventAdminCreateWithoutUserInput!]
  connect: [EventAdminWhereUniqueInput!]
}

input EventAdminCreateWithoutEventInput {
  permission: PermissionCreateOneWithoutEventAdminsInput
  user: UserCreateOneWithoutEventAdminsInput
}

input EventAdminCreateWithoutPermissionInput {
  event: EventCreateOneWithoutEventAdminsInput
  user: UserCreateOneWithoutEventAdminsInput
}

input EventAdminCreateWithoutUserInput {
  event: EventCreateOneWithoutEventAdminsInput
  permission: PermissionCreateOneWithoutEventAdminsInput
}

"""An edge in a connection."""
type EventAdminEdge {
  """The item at the end of the edge."""
  node: EventAdmin!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventAdminOrderByInput {
  id_ASC
  id_DESC
}

type EventAdminPreviousValues {
  id: Int!
}

type EventAdminSubscriptionPayload {
  mutation: MutationType!
  node: EventAdmin
  updatedFields: [String!]
  previousValues: EventAdminPreviousValues
}

input EventAdminSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventAdminSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventAdminSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventAdminSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventAdminWhereInput
}

input EventAdminUpdateInput {
  event: EventUpdateOneWithoutEventAdminsInput
  permission: PermissionUpdateOneWithoutEventAdminsInput
  user: UserUpdateOneWithoutEventAdminsInput
}

input EventAdminUpdateManyWithoutEventInput {
  create: [EventAdminCreateWithoutEventInput!]
  connect: [EventAdminWhereUniqueInput!]
  disconnect: [EventAdminWhereUniqueInput!]
  delete: [EventAdminWhereUniqueInput!]
  update: [EventAdminUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [EventAdminUpsertWithWhereUniqueWithoutEventInput!]
}

input EventAdminUpdateManyWithoutPermissionInput {
  create: [EventAdminCreateWithoutPermissionInput!]
  connect: [EventAdminWhereUniqueInput!]
  disconnect: [EventAdminWhereUniqueInput!]
  delete: [EventAdminWhereUniqueInput!]
  update: [EventAdminUpdateWithWhereUniqueWithoutPermissionInput!]
  upsert: [EventAdminUpsertWithWhereUniqueWithoutPermissionInput!]
}

input EventAdminUpdateManyWithoutUserInput {
  create: [EventAdminCreateWithoutUserInput!]
  connect: [EventAdminWhereUniqueInput!]
  disconnect: [EventAdminWhereUniqueInput!]
  delete: [EventAdminWhereUniqueInput!]
  update: [EventAdminUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [EventAdminUpsertWithWhereUniqueWithoutUserInput!]
}

input EventAdminUpdateWithoutEventDataInput {
  permission: PermissionUpdateOneWithoutEventAdminsInput
  user: UserUpdateOneWithoutEventAdminsInput
}

input EventAdminUpdateWithoutPermissionDataInput {
  event: EventUpdateOneWithoutEventAdminsInput
  user: UserUpdateOneWithoutEventAdminsInput
}

input EventAdminUpdateWithoutUserDataInput {
  event: EventUpdateOneWithoutEventAdminsInput
  permission: PermissionUpdateOneWithoutEventAdminsInput
}

input EventAdminUpdateWithWhereUniqueWithoutEventInput {
  where: EventAdminWhereUniqueInput!
  data: EventAdminUpdateWithoutEventDataInput!
}

input EventAdminUpdateWithWhereUniqueWithoutPermissionInput {
  where: EventAdminWhereUniqueInput!
  data: EventAdminUpdateWithoutPermissionDataInput!
}

input EventAdminUpdateWithWhereUniqueWithoutUserInput {
  where: EventAdminWhereUniqueInput!
  data: EventAdminUpdateWithoutUserDataInput!
}

input EventAdminUpsertWithWhereUniqueWithoutEventInput {
  where: EventAdminWhereUniqueInput!
  update: EventAdminUpdateWithoutEventDataInput!
  create: EventAdminCreateWithoutEventInput!
}

input EventAdminUpsertWithWhereUniqueWithoutPermissionInput {
  where: EventAdminWhereUniqueInput!
  update: EventAdminUpdateWithoutPermissionDataInput!
  create: EventAdminCreateWithoutPermissionInput!
}

input EventAdminUpsertWithWhereUniqueWithoutUserInput {
  where: EventAdminWhereUniqueInput!
  update: EventAdminUpdateWithoutUserDataInput!
  create: EventAdminCreateWithoutUserInput!
}

input EventAdminWhereInput {
  """Logical AND on all given filters."""
  AND: [EventAdminWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventAdminWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventAdminWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  event: EventWhereInput
  permission: PermissionWhereInput
  user: UserWhereInput
}

input EventAdminWhereUniqueInput {
  id: Int
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  address1: String!
  address2: String
  address3: String
  city: String!
  country: String!
  description: String
  entranceTax: Int
  eventDate: DateTime!
  imageLarge: String
  imageSmall: String
  state: String!
  title: String!
  zip: String!
  boards: BoardCreateManyWithoutEventInput
  comments: CommentCreateManyWithoutEventInput
  eventAdmins: EventAdminCreateManyWithoutEventInput
  expenses: ExpenseCreateManyWithoutEventInput
  reviews: ReviewCreateManyWithoutEventInput
}

input EventCreateOneWithoutBoardsInput {
  create: EventCreateWithoutBoardsInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutCommentsInput {
  create: EventCreateWithoutCommentsInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutEventAdminsInput {
  create: EventCreateWithoutEventAdminsInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutExpensesInput {
  create: EventCreateWithoutExpensesInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutReviewsInput {
  create: EventCreateWithoutReviewsInput
  connect: EventWhereUniqueInput
}

input EventCreateWithoutBoardsInput {
  address1: String!
  address2: String
  address3: String
  city: String!
  country: String!
  description: String
  entranceTax: Int
  eventDate: DateTime!
  imageLarge: String
  imageSmall: String
  state: String!
  title: String!
  zip: String!
  comments: CommentCreateManyWithoutEventInput
  eventAdmins: EventAdminCreateManyWithoutEventInput
  expenses: ExpenseCreateManyWithoutEventInput
  reviews: ReviewCreateManyWithoutEventInput
}

input EventCreateWithoutCommentsInput {
  address1: String!
  address2: String
  address3: String
  city: String!
  country: String!
  description: String
  entranceTax: Int
  eventDate: DateTime!
  imageLarge: String
  imageSmall: String
  state: String!
  title: String!
  zip: String!
  boards: BoardCreateManyWithoutEventInput
  eventAdmins: EventAdminCreateManyWithoutEventInput
  expenses: ExpenseCreateManyWithoutEventInput
  reviews: ReviewCreateManyWithoutEventInput
}

input EventCreateWithoutEventAdminsInput {
  address1: String!
  address2: String
  address3: String
  city: String!
  country: String!
  description: String
  entranceTax: Int
  eventDate: DateTime!
  imageLarge: String
  imageSmall: String
  state: String!
  title: String!
  zip: String!
  boards: BoardCreateManyWithoutEventInput
  comments: CommentCreateManyWithoutEventInput
  expenses: ExpenseCreateManyWithoutEventInput
  reviews: ReviewCreateManyWithoutEventInput
}

input EventCreateWithoutExpensesInput {
  address1: String!
  address2: String
  address3: String
  city: String!
  country: String!
  description: String
  entranceTax: Int
  eventDate: DateTime!
  imageLarge: String
  imageSmall: String
  state: String!
  title: String!
  zip: String!
  boards: BoardCreateManyWithoutEventInput
  comments: CommentCreateManyWithoutEventInput
  eventAdmins: EventAdminCreateManyWithoutEventInput
  reviews: ReviewCreateManyWithoutEventInput
}

input EventCreateWithoutReviewsInput {
  address1: String!
  address2: String
  address3: String
  city: String!
  country: String!
  description: String
  entranceTax: Int
  eventDate: DateTime!
  imageLarge: String
  imageSmall: String
  state: String!
  title: String!
  zip: String!
  boards: BoardCreateManyWithoutEventInput
  comments: CommentCreateManyWithoutEventInput
  eventAdmins: EventAdminCreateManyWithoutEventInput
  expenses: ExpenseCreateManyWithoutEventInput
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  address1_ASC
  address1_DESC
  address2_ASC
  address2_DESC
  address3_ASC
  address3_DESC
  city_ASC
  city_DESC
  country_ASC
  country_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  entranceTax_ASC
  entranceTax_DESC
  eventDate_ASC
  eventDate_DESC
  imageLarge_ASC
  imageLarge_DESC
  imageSmall_ASC
  imageSmall_DESC
  state_ASC
  state_DESC
  title_ASC
  title_DESC
  zip_ASC
  zip_DESC
}

type EventPreviousValues {
  id: Int!
  address1: String!
  address2: String
  address3: String
  city: String!
  country: String!
  createdAt: DateTime!
  description: String
  entranceTax: Int
  eventDate: DateTime!
  imageLarge: String
  imageSmall: String
  state: String!
  title: String!
  zip: String!
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

input EventUpdateInput {
  address1: String
  address2: String
  address3: String
  city: String
  country: String
  description: String
  entranceTax: Int
  eventDate: DateTime
  imageLarge: String
  imageSmall: String
  state: String
  title: String
  zip: String
  boards: BoardUpdateManyWithoutEventInput
  comments: CommentUpdateManyWithoutEventInput
  eventAdmins: EventAdminUpdateManyWithoutEventInput
  expenses: ExpenseUpdateManyWithoutEventInput
  reviews: ReviewUpdateManyWithoutEventInput
}

input EventUpdateManyMutationInput {
  address1: String
  address2: String
  address3: String
  city: String
  country: String
  description: String
  entranceTax: Int
  eventDate: DateTime
  imageLarge: String
  imageSmall: String
  state: String
  title: String
  zip: String
}

input EventUpdateOneWithoutBoardsInput {
  create: EventCreateWithoutBoardsInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventUpdateWithoutBoardsDataInput
  upsert: EventUpsertWithoutBoardsInput
}

input EventUpdateOneWithoutCommentsInput {
  create: EventCreateWithoutCommentsInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventUpdateWithoutCommentsDataInput
  upsert: EventUpsertWithoutCommentsInput
}

input EventUpdateOneWithoutEventAdminsInput {
  create: EventCreateWithoutEventAdminsInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventUpdateWithoutEventAdminsDataInput
  upsert: EventUpsertWithoutEventAdminsInput
}

input EventUpdateOneWithoutExpensesInput {
  create: EventCreateWithoutExpensesInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventUpdateWithoutExpensesDataInput
  upsert: EventUpsertWithoutExpensesInput
}

input EventUpdateOneWithoutReviewsInput {
  create: EventCreateWithoutReviewsInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventUpdateWithoutReviewsDataInput
  upsert: EventUpsertWithoutReviewsInput
}

input EventUpdateWithoutBoardsDataInput {
  address1: String
  address2: String
  address3: String
  city: String
  country: String
  description: String
  entranceTax: Int
  eventDate: DateTime
  imageLarge: String
  imageSmall: String
  state: String
  title: String
  zip: String
  comments: CommentUpdateManyWithoutEventInput
  eventAdmins: EventAdminUpdateManyWithoutEventInput
  expenses: ExpenseUpdateManyWithoutEventInput
  reviews: ReviewUpdateManyWithoutEventInput
}

input EventUpdateWithoutCommentsDataInput {
  address1: String
  address2: String
  address3: String
  city: String
  country: String
  description: String
  entranceTax: Int
  eventDate: DateTime
  imageLarge: String
  imageSmall: String
  state: String
  title: String
  zip: String
  boards: BoardUpdateManyWithoutEventInput
  eventAdmins: EventAdminUpdateManyWithoutEventInput
  expenses: ExpenseUpdateManyWithoutEventInput
  reviews: ReviewUpdateManyWithoutEventInput
}

input EventUpdateWithoutEventAdminsDataInput {
  address1: String
  address2: String
  address3: String
  city: String
  country: String
  description: String
  entranceTax: Int
  eventDate: DateTime
  imageLarge: String
  imageSmall: String
  state: String
  title: String
  zip: String
  boards: BoardUpdateManyWithoutEventInput
  comments: CommentUpdateManyWithoutEventInput
  expenses: ExpenseUpdateManyWithoutEventInput
  reviews: ReviewUpdateManyWithoutEventInput
}

input EventUpdateWithoutExpensesDataInput {
  address1: String
  address2: String
  address3: String
  city: String
  country: String
  description: String
  entranceTax: Int
  eventDate: DateTime
  imageLarge: String
  imageSmall: String
  state: String
  title: String
  zip: String
  boards: BoardUpdateManyWithoutEventInput
  comments: CommentUpdateManyWithoutEventInput
  eventAdmins: EventAdminUpdateManyWithoutEventInput
  reviews: ReviewUpdateManyWithoutEventInput
}

input EventUpdateWithoutReviewsDataInput {
  address1: String
  address2: String
  address3: String
  city: String
  country: String
  description: String
  entranceTax: Int
  eventDate: DateTime
  imageLarge: String
  imageSmall: String
  state: String
  title: String
  zip: String
  boards: BoardUpdateManyWithoutEventInput
  comments: CommentUpdateManyWithoutEventInput
  eventAdmins: EventAdminUpdateManyWithoutEventInput
  expenses: ExpenseUpdateManyWithoutEventInput
}

input EventUpsertWithoutBoardsInput {
  update: EventUpdateWithoutBoardsDataInput!
  create: EventCreateWithoutBoardsInput!
}

input EventUpsertWithoutCommentsInput {
  update: EventUpdateWithoutCommentsDataInput!
  create: EventCreateWithoutCommentsInput!
}

input EventUpsertWithoutEventAdminsInput {
  update: EventUpdateWithoutEventAdminsDataInput!
  create: EventCreateWithoutEventAdminsInput!
}

input EventUpsertWithoutExpensesInput {
  update: EventUpdateWithoutExpensesDataInput!
  create: EventCreateWithoutExpensesInput!
}

input EventUpsertWithoutReviewsInput {
  update: EventUpdateWithoutReviewsDataInput!
  create: EventCreateWithoutReviewsInput!
}

input EventWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  address1: String

  """All values that are not equal to given value."""
  address1_not: String

  """All values that are contained in given list."""
  address1_in: [String!]

  """All values that are not contained in given list."""
  address1_not_in: [String!]

  """All values less than the given value."""
  address1_lt: String

  """All values less than or equal the given value."""
  address1_lte: String

  """All values greater than the given value."""
  address1_gt: String

  """All values greater than or equal the given value."""
  address1_gte: String

  """All values containing the given string."""
  address1_contains: String

  """All values not containing the given string."""
  address1_not_contains: String

  """All values starting with the given string."""
  address1_starts_with: String

  """All values not starting with the given string."""
  address1_not_starts_with: String

  """All values ending with the given string."""
  address1_ends_with: String

  """All values not ending with the given string."""
  address1_not_ends_with: String
  address2: String

  """All values that are not equal to given value."""
  address2_not: String

  """All values that are contained in given list."""
  address2_in: [String!]

  """All values that are not contained in given list."""
  address2_not_in: [String!]

  """All values less than the given value."""
  address2_lt: String

  """All values less than or equal the given value."""
  address2_lte: String

  """All values greater than the given value."""
  address2_gt: String

  """All values greater than or equal the given value."""
  address2_gte: String

  """All values containing the given string."""
  address2_contains: String

  """All values not containing the given string."""
  address2_not_contains: String

  """All values starting with the given string."""
  address2_starts_with: String

  """All values not starting with the given string."""
  address2_not_starts_with: String

  """All values ending with the given string."""
  address2_ends_with: String

  """All values not ending with the given string."""
  address2_not_ends_with: String
  address3: String

  """All values that are not equal to given value."""
  address3_not: String

  """All values that are contained in given list."""
  address3_in: [String!]

  """All values that are not contained in given list."""
  address3_not_in: [String!]

  """All values less than the given value."""
  address3_lt: String

  """All values less than or equal the given value."""
  address3_lte: String

  """All values greater than the given value."""
  address3_gt: String

  """All values greater than or equal the given value."""
  address3_gte: String

  """All values containing the given string."""
  address3_contains: String

  """All values not containing the given string."""
  address3_not_contains: String

  """All values starting with the given string."""
  address3_starts_with: String

  """All values not starting with the given string."""
  address3_not_starts_with: String

  """All values ending with the given string."""
  address3_ends_with: String

  """All values not ending with the given string."""
  address3_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  entranceTax: Int

  """All values that are not equal to given value."""
  entranceTax_not: Int

  """All values that are contained in given list."""
  entranceTax_in: [Int!]

  """All values that are not contained in given list."""
  entranceTax_not_in: [Int!]

  """All values less than the given value."""
  entranceTax_lt: Int

  """All values less than or equal the given value."""
  entranceTax_lte: Int

  """All values greater than the given value."""
  entranceTax_gt: Int

  """All values greater than or equal the given value."""
  entranceTax_gte: Int
  eventDate: DateTime

  """All values that are not equal to given value."""
  eventDate_not: DateTime

  """All values that are contained in given list."""
  eventDate_in: [DateTime!]

  """All values that are not contained in given list."""
  eventDate_not_in: [DateTime!]

  """All values less than the given value."""
  eventDate_lt: DateTime

  """All values less than or equal the given value."""
  eventDate_lte: DateTime

  """All values greater than the given value."""
  eventDate_gt: DateTime

  """All values greater than or equal the given value."""
  eventDate_gte: DateTime
  imageLarge: String

  """All values that are not equal to given value."""
  imageLarge_not: String

  """All values that are contained in given list."""
  imageLarge_in: [String!]

  """All values that are not contained in given list."""
  imageLarge_not_in: [String!]

  """All values less than the given value."""
  imageLarge_lt: String

  """All values less than or equal the given value."""
  imageLarge_lte: String

  """All values greater than the given value."""
  imageLarge_gt: String

  """All values greater than or equal the given value."""
  imageLarge_gte: String

  """All values containing the given string."""
  imageLarge_contains: String

  """All values not containing the given string."""
  imageLarge_not_contains: String

  """All values starting with the given string."""
  imageLarge_starts_with: String

  """All values not starting with the given string."""
  imageLarge_not_starts_with: String

  """All values ending with the given string."""
  imageLarge_ends_with: String

  """All values not ending with the given string."""
  imageLarge_not_ends_with: String
  imageSmall: String

  """All values that are not equal to given value."""
  imageSmall_not: String

  """All values that are contained in given list."""
  imageSmall_in: [String!]

  """All values that are not contained in given list."""
  imageSmall_not_in: [String!]

  """All values less than the given value."""
  imageSmall_lt: String

  """All values less than or equal the given value."""
  imageSmall_lte: String

  """All values greater than the given value."""
  imageSmall_gt: String

  """All values greater than or equal the given value."""
  imageSmall_gte: String

  """All values containing the given string."""
  imageSmall_contains: String

  """All values not containing the given string."""
  imageSmall_not_contains: String

  """All values starting with the given string."""
  imageSmall_starts_with: String

  """All values not starting with the given string."""
  imageSmall_not_starts_with: String

  """All values ending with the given string."""
  imageSmall_ends_with: String

  """All values not ending with the given string."""
  imageSmall_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  zip: String

  """All values that are not equal to given value."""
  zip_not: String

  """All values that are contained in given list."""
  zip_in: [String!]

  """All values that are not contained in given list."""
  zip_not_in: [String!]

  """All values less than the given value."""
  zip_lt: String

  """All values less than or equal the given value."""
  zip_lte: String

  """All values greater than the given value."""
  zip_gt: String

  """All values greater than or equal the given value."""
  zip_gte: String

  """All values containing the given string."""
  zip_contains: String

  """All values not containing the given string."""
  zip_not_contains: String

  """All values starting with the given string."""
  zip_starts_with: String

  """All values not starting with the given string."""
  zip_not_starts_with: String

  """All values ending with the given string."""
  zip_ends_with: String

  """All values not ending with the given string."""
  zip_not_ends_with: String
  boards_every: BoardWhereInput
  boards_some: BoardWhereInput
  boards_none: BoardWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  eventAdmins_every: EventAdminWhereInput
  eventAdmins_some: EventAdminWhereInput
  eventAdmins_none: EventAdminWhereInput
  expenses_every: ExpenseWhereInput
  expenses_some: ExpenseWhereInput
  expenses_none: ExpenseWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
}

input EventWhereUniqueInput {
  id: Int
}

type Expense {
  id: Int!
  amount: Int!
  createdAt: DateTime!
  description: String
  event: Event
  title: String!
  user: User
}

"""A connection to a list of items."""
type ExpenseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExpenseEdge]!
  aggregate: AggregateExpense!
}

input ExpenseCreateInput {
  amount: Int!
  description: String
  title: String!
  event: EventCreateOneWithoutExpensesInput
  user: UserCreateOneWithoutExpensesInput
}

input ExpenseCreateManyWithoutEventInput {
  create: [ExpenseCreateWithoutEventInput!]
  connect: [ExpenseWhereUniqueInput!]
}

input ExpenseCreateManyWithoutUserInput {
  create: [ExpenseCreateWithoutUserInput!]
  connect: [ExpenseWhereUniqueInput!]
}

input ExpenseCreateWithoutEventInput {
  amount: Int!
  description: String
  title: String!
  user: UserCreateOneWithoutExpensesInput
}

input ExpenseCreateWithoutUserInput {
  amount: Int!
  description: String
  title: String!
  event: EventCreateOneWithoutExpensesInput
}

"""An edge in a connection."""
type ExpenseEdge {
  """The item at the end of the edge."""
  node: Expense!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ExpenseOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  title_ASC
  title_DESC
}

type ExpensePreviousValues {
  id: Int!
  amount: Int!
  createdAt: DateTime!
  description: String
  title: String!
}

type ExpenseSubscriptionPayload {
  mutation: MutationType!
  node: Expense
  updatedFields: [String!]
  previousValues: ExpensePreviousValues
}

input ExpenseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ExpenseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExpenseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExpenseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ExpenseWhereInput
}

input ExpenseUpdateInput {
  amount: Int
  description: String
  title: String
  event: EventUpdateOneWithoutExpensesInput
  user: UserUpdateOneWithoutExpensesInput
}

input ExpenseUpdateManyMutationInput {
  amount: Int
  description: String
  title: String
}

input ExpenseUpdateManyWithoutEventInput {
  create: [ExpenseCreateWithoutEventInput!]
  connect: [ExpenseWhereUniqueInput!]
  disconnect: [ExpenseWhereUniqueInput!]
  delete: [ExpenseWhereUniqueInput!]
  update: [ExpenseUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [ExpenseUpsertWithWhereUniqueWithoutEventInput!]
}

input ExpenseUpdateManyWithoutUserInput {
  create: [ExpenseCreateWithoutUserInput!]
  connect: [ExpenseWhereUniqueInput!]
  disconnect: [ExpenseWhereUniqueInput!]
  delete: [ExpenseWhereUniqueInput!]
  update: [ExpenseUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ExpenseUpsertWithWhereUniqueWithoutUserInput!]
}

input ExpenseUpdateWithoutEventDataInput {
  amount: Int
  description: String
  title: String
  user: UserUpdateOneWithoutExpensesInput
}

input ExpenseUpdateWithoutUserDataInput {
  amount: Int
  description: String
  title: String
  event: EventUpdateOneWithoutExpensesInput
}

input ExpenseUpdateWithWhereUniqueWithoutEventInput {
  where: ExpenseWhereUniqueInput!
  data: ExpenseUpdateWithoutEventDataInput!
}

input ExpenseUpdateWithWhereUniqueWithoutUserInput {
  where: ExpenseWhereUniqueInput!
  data: ExpenseUpdateWithoutUserDataInput!
}

input ExpenseUpsertWithWhereUniqueWithoutEventInput {
  where: ExpenseWhereUniqueInput!
  update: ExpenseUpdateWithoutEventDataInput!
  create: ExpenseCreateWithoutEventInput!
}

input ExpenseUpsertWithWhereUniqueWithoutUserInput {
  where: ExpenseWhereUniqueInput!
  update: ExpenseUpdateWithoutUserDataInput!
  create: ExpenseCreateWithoutUserInput!
}

input ExpenseWhereInput {
  """Logical AND on all given filters."""
  AND: [ExpenseWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExpenseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExpenseWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  amount: Int

  """All values that are not equal to given value."""
  amount_not: Int

  """All values that are contained in given list."""
  amount_in: [Int!]

  """All values that are not contained in given list."""
  amount_not_in: [Int!]

  """All values less than the given value."""
  amount_lt: Int

  """All values less than or equal the given value."""
  amount_lte: Int

  """All values greater than the given value."""
  amount_gt: Int

  """All values greater than or equal the given value."""
  amount_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  event: EventWhereInput
  user: UserWhereInput
}

input ExpenseWhereUniqueInput {
  id: Int
}

type List {
  id: Int!
  board: Board
  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card!]
  createdAt: DateTime!
  description: String
  order: Int!
  title: String!
}

"""A connection to a list of items."""
type ListConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ListEdge]!
  aggregate: AggregateList!
}

input ListCreateInput {
  description: String
  order: Int!
  title: String!
  board: BoardCreateOneWithoutListsInput
  cards: CardCreateManyWithoutListInput
}

input ListCreateManyWithoutBoardInput {
  create: [ListCreateWithoutBoardInput!]
  connect: [ListWhereUniqueInput!]
}

input ListCreateOneWithoutCardsInput {
  create: ListCreateWithoutCardsInput
  connect: ListWhereUniqueInput
}

input ListCreateWithoutBoardInput {
  description: String
  order: Int!
  title: String!
  cards: CardCreateManyWithoutListInput
}

input ListCreateWithoutCardsInput {
  description: String
  order: Int!
  title: String!
  board: BoardCreateOneWithoutListsInput
}

"""An edge in a connection."""
type ListEdge {
  """The item at the end of the edge."""
  node: List!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ListOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  order_ASC
  order_DESC
  title_ASC
  title_DESC
}

type ListPreviousValues {
  id: Int!
  createdAt: DateTime!
  description: String
  order: Int!
  title: String!
}

type ListSubscriptionPayload {
  mutation: MutationType!
  node: List
  updatedFields: [String!]
  previousValues: ListPreviousValues
}

input ListSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ListSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ListSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ListSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ListWhereInput
}

input ListUpdateInput {
  description: String
  order: Int
  title: String
  board: BoardUpdateOneWithoutListsInput
  cards: CardUpdateManyWithoutListInput
}

input ListUpdateManyMutationInput {
  description: String
  order: Int
  title: String
}

input ListUpdateManyWithoutBoardInput {
  create: [ListCreateWithoutBoardInput!]
  connect: [ListWhereUniqueInput!]
  disconnect: [ListWhereUniqueInput!]
  delete: [ListWhereUniqueInput!]
  update: [ListUpdateWithWhereUniqueWithoutBoardInput!]
  upsert: [ListUpsertWithWhereUniqueWithoutBoardInput!]
}

input ListUpdateOneWithoutCardsInput {
  create: ListCreateWithoutCardsInput
  connect: ListWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ListUpdateWithoutCardsDataInput
  upsert: ListUpsertWithoutCardsInput
}

input ListUpdateWithoutBoardDataInput {
  description: String
  order: Int
  title: String
  cards: CardUpdateManyWithoutListInput
}

input ListUpdateWithoutCardsDataInput {
  description: String
  order: Int
  title: String
  board: BoardUpdateOneWithoutListsInput
}

input ListUpdateWithWhereUniqueWithoutBoardInput {
  where: ListWhereUniqueInput!
  data: ListUpdateWithoutBoardDataInput!
}

input ListUpsertWithoutCardsInput {
  update: ListUpdateWithoutCardsDataInput!
  create: ListCreateWithoutCardsInput!
}

input ListUpsertWithWhereUniqueWithoutBoardInput {
  where: ListWhereUniqueInput!
  update: ListUpdateWithoutBoardDataInput!
  create: ListCreateWithoutBoardInput!
}

input ListWhereInput {
  """Logical AND on all given filters."""
  AND: [ListWhereInput!]

  """Logical OR on all given filters."""
  OR: [ListWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ListWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  order: Int

  """All values that are not equal to given value."""
  order_not: Int

  """All values that are contained in given list."""
  order_in: [Int!]

  """All values that are not contained in given list."""
  order_not_in: [Int!]

  """All values less than the given value."""
  order_lt: Int

  """All values less than or equal the given value."""
  order_lte: Int

  """All values greater than the given value."""
  order_gt: Int

  """All values greater than or equal the given value."""
  order_gte: Int
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  board: BoardWhereInput
  cards_every: CardWhereInput
  cards_some: CardWhereInput
  cards_none: CardWhereInput
}

input ListWhereUniqueInput {
  id: Int
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createBoard(data: BoardCreateInput!): Board!
  createCard(data: CardCreateInput!): Card!
  createComment(data: CommentCreateInput!): Comment!
  createEvent(data: EventCreateInput!): Event!
  createEventAdmin(data: EventAdminCreateInput!): EventAdmin!
  createExpense(data: ExpenseCreateInput!): Expense!
  createList(data: ListCreateInput!): List!
  createPermission(data: PermissionCreateInput!): Permission!
  createReview(data: ReviewCreateInput!): Review!
  createUser(data: UserCreateInput!): User!
  updateBoard(data: BoardUpdateInput!, where: BoardWhereUniqueInput!): Board
  updateCard(data: CardUpdateInput!, where: CardWhereUniqueInput!): Card
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateEventAdmin(data: EventAdminUpdateInput!, where: EventAdminWhereUniqueInput!): EventAdmin
  updateExpense(data: ExpenseUpdateInput!, where: ExpenseWhereUniqueInput!): Expense
  updateList(data: ListUpdateInput!, where: ListWhereUniqueInput!): List
  updatePermission(data: PermissionUpdateInput!, where: PermissionWhereUniqueInput!): Permission
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteBoard(where: BoardWhereUniqueInput!): Board
  deleteCard(where: CardWhereUniqueInput!): Card
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEventAdmin(where: EventAdminWhereUniqueInput!): EventAdmin
  deleteExpense(where: ExpenseWhereUniqueInput!): Expense
  deleteList(where: ListWhereUniqueInput!): List
  deletePermission(where: PermissionWhereUniqueInput!): Permission
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteUser(where: UserWhereUniqueInput!): User
  upsertBoard(where: BoardWhereUniqueInput!, create: BoardCreateInput!, update: BoardUpdateInput!): Board!
  upsertCard(where: CardWhereUniqueInput!, create: CardCreateInput!, update: CardUpdateInput!): Card!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertEventAdmin(where: EventAdminWhereUniqueInput!, create: EventAdminCreateInput!, update: EventAdminUpdateInput!): EventAdmin!
  upsertExpense(where: ExpenseWhereUniqueInput!, create: ExpenseCreateInput!, update: ExpenseUpdateInput!): Expense!
  upsertList(where: ListWhereUniqueInput!, create: ListCreateInput!, update: ListUpdateInput!): List!
  upsertPermission(where: PermissionWhereUniqueInput!, create: PermissionCreateInput!, update: PermissionUpdateInput!): Permission!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyBoards(data: BoardUpdateManyMutationInput!, where: BoardWhereInput): BatchPayload!
  updateManyCards(data: CardUpdateManyMutationInput!, where: CardWhereInput): BatchPayload!
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  updateManyExpenses(data: ExpenseUpdateManyMutationInput!, where: ExpenseWhereInput): BatchPayload!
  updateManyLists(data: ListUpdateManyMutationInput!, where: ListWhereInput): BatchPayload!
  updateManyPermissions(data: PermissionUpdateManyMutationInput!, where: PermissionWhereInput): BatchPayload!
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyBoards(where: BoardWhereInput): BatchPayload!
  deleteManyCards(where: CardWhereInput): BatchPayload!
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  deleteManyEventAdmins(where: EventAdminWhereInput): BatchPayload!
  deleteManyExpenses(where: ExpenseWhereInput): BatchPayload!
  deleteManyLists(where: ListWhereInput): BatchPayload!
  deleteManyPermissions(where: PermissionWhereInput): BatchPayload!
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Permission {
  id: Int!
  eventAdmins(where: EventAdminWhereInput, orderBy: EventAdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventAdmin!]
  name: String!
}

"""A connection to a list of items."""
type PermissionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PermissionEdge]!
  aggregate: AggregatePermission!
}

input PermissionCreateInput {
  name: String!
  eventAdmins: EventAdminCreateManyWithoutPermissionInput
}

input PermissionCreateOneWithoutEventAdminsInput {
  create: PermissionCreateWithoutEventAdminsInput
  connect: PermissionWhereUniqueInput
}

input PermissionCreateWithoutEventAdminsInput {
  name: String!
}

"""An edge in a connection."""
type PermissionEdge {
  """The item at the end of the edge."""
  node: Permission!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PermissionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type PermissionPreviousValues {
  id: Int!
  name: String!
}

type PermissionSubscriptionPayload {
  mutation: MutationType!
  node: Permission
  updatedFields: [String!]
  previousValues: PermissionPreviousValues
}

input PermissionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PermissionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PermissionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PermissionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PermissionWhereInput
}

input PermissionUpdateInput {
  name: String
  eventAdmins: EventAdminUpdateManyWithoutPermissionInput
}

input PermissionUpdateManyMutationInput {
  name: String
}

input PermissionUpdateOneWithoutEventAdminsInput {
  create: PermissionCreateWithoutEventAdminsInput
  connect: PermissionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PermissionUpdateWithoutEventAdminsDataInput
  upsert: PermissionUpsertWithoutEventAdminsInput
}

input PermissionUpdateWithoutEventAdminsDataInput {
  name: String
}

input PermissionUpsertWithoutEventAdminsInput {
  update: PermissionUpdateWithoutEventAdminsDataInput!
  create: PermissionCreateWithoutEventAdminsInput!
}

input PermissionWhereInput {
  """Logical AND on all given filters."""
  AND: [PermissionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PermissionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PermissionWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  eventAdmins_every: EventAdminWhereInput
  eventAdmins_some: EventAdminWhereInput
  eventAdmins_none: EventAdminWhereInput
}

input PermissionWhereUniqueInput {
  id: Int
  name: String
}

type Query {
  boards(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board]!
  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card]!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  eventAdmins(where: EventAdminWhereInput, orderBy: EventAdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventAdmin]!
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense]!
  lists(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [List]!
  permissions(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Permission]!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  board(where: BoardWhereUniqueInput!): Board
  card(where: CardWhereUniqueInput!): Card
  comment(where: CommentWhereUniqueInput!): Comment
  event(where: EventWhereUniqueInput!): Event
  eventAdmin(where: EventAdminWhereUniqueInput!): EventAdmin
  expense(where: ExpenseWhereUniqueInput!): Expense
  list(where: ListWhereUniqueInput!): List
  permission(where: PermissionWhereUniqueInput!): Permission
  review(where: ReviewWhereUniqueInput!): Review
  user(where: UserWhereUniqueInput!): User
  boardsConnection(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BoardConnection!
  cardsConnection(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CardConnection!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  eventAdminsConnection(where: EventAdminWhereInput, orderBy: EventAdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventAdminConnection!
  expensesConnection(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExpenseConnection!
  listsConnection(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ListConnection!
  permissionsConnection(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PermissionConnection!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
}

type Review {
  id: Int!
  createdAt: DateTime!
  description: String
  event: Event
  rating: Int!
  user: User
}

"""A connection to a list of items."""
type ReviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  description: String
  rating: Int!
  event: EventCreateOneWithoutReviewsInput
  user: UserCreateOneWithoutReviewsInput
}

input ReviewCreateManyWithoutEventInput {
  create: [ReviewCreateWithoutEventInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateManyWithoutUserInput {
  create: [ReviewCreateWithoutUserInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateWithoutEventInput {
  description: String
  rating: Int!
  user: UserCreateOneWithoutReviewsInput
}

input ReviewCreateWithoutUserInput {
  description: String
  rating: Int!
  event: EventCreateOneWithoutReviewsInput
}

"""An edge in a connection."""
type ReviewEdge {
  """The item at the end of the edge."""
  node: Review!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  rating_ASC
  rating_DESC
}

type ReviewPreviousValues {
  id: Int!
  createdAt: DateTime!
  description: String
  rating: Int!
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
}

input ReviewUpdateInput {
  description: String
  rating: Int
  event: EventUpdateOneWithoutReviewsInput
  user: UserUpdateOneWithoutReviewsInput
}

input ReviewUpdateManyMutationInput {
  description: String
  rating: Int
}

input ReviewUpdateManyWithoutEventInput {
  create: [ReviewCreateWithoutEventInput!]
  connect: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutEventInput!]
}

input ReviewUpdateManyWithoutUserInput {
  create: [ReviewCreateWithoutUserInput!]
  connect: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutUserInput!]
}

input ReviewUpdateWithoutEventDataInput {
  description: String
  rating: Int
  user: UserUpdateOneWithoutReviewsInput
}

input ReviewUpdateWithoutUserDataInput {
  description: String
  rating: Int
  event: EventUpdateOneWithoutReviewsInput
}

input ReviewUpdateWithWhereUniqueWithoutEventInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutEventDataInput!
}

input ReviewUpdateWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutUserDataInput!
}

input ReviewUpsertWithWhereUniqueWithoutEventInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutEventDataInput!
  create: ReviewCreateWithoutEventInput!
}

input ReviewUpsertWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutUserDataInput!
  create: ReviewCreateWithoutUserInput!
}

input ReviewWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  event: EventWhereInput
  user: UserWhereInput
}

input ReviewWhereUniqueInput {
  id: Int
}

type Subscription {
  board(where: BoardSubscriptionWhereInput): BoardSubscriptionPayload
  card(where: CardSubscriptionWhereInput): CardSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  eventAdmin(where: EventAdminSubscriptionWhereInput): EventAdminSubscriptionPayload
  expense(where: ExpenseSubscriptionWhereInput): ExpenseSubscriptionPayload
  list(where: ListSubscriptionWhereInput): ListSubscriptionPayload
  permission(where: PermissionSubscriptionWhereInput): PermissionSubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: Int!
  cards_assignedUsers(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card!]
  cards_users(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  email: String!
  eventAdmins(where: EventAdminWhereInput, orderBy: EventAdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventAdmin!]
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense!]
  firstName: String!
  lastName: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  username: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  username: String!
  cards_assignedUsers: CardCreateManyWithoutAssignedUserInput
  cards_users: CardCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  eventAdmins: EventAdminCreateManyWithoutUserInput
  expenses: ExpenseCreateManyWithoutUserInput
  reviews: ReviewCreateManyWithoutUserInput
}

input UserCreateOneWithoutCards_assignedUsersInput {
  create: UserCreateWithoutCards_assignedUsersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCards_usersInput {
  create: UserCreateWithoutCards_usersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEventAdminsInput {
  create: UserCreateWithoutEventAdminsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutExpensesInput {
  create: UserCreateWithoutExpensesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCards_assignedUsersInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  username: String!
  cards_users: CardCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  eventAdmins: EventAdminCreateManyWithoutUserInput
  expenses: ExpenseCreateManyWithoutUserInput
  reviews: ReviewCreateManyWithoutUserInput
}

input UserCreateWithoutCards_usersInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  username: String!
  cards_assignedUsers: CardCreateManyWithoutAssignedUserInput
  comments: CommentCreateManyWithoutUserInput
  eventAdmins: EventAdminCreateManyWithoutUserInput
  expenses: ExpenseCreateManyWithoutUserInput
  reviews: ReviewCreateManyWithoutUserInput
}

input UserCreateWithoutCommentsInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  username: String!
  cards_assignedUsers: CardCreateManyWithoutAssignedUserInput
  cards_users: CardCreateManyWithoutUserInput
  eventAdmins: EventAdminCreateManyWithoutUserInput
  expenses: ExpenseCreateManyWithoutUserInput
  reviews: ReviewCreateManyWithoutUserInput
}

input UserCreateWithoutEventAdminsInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  username: String!
  cards_assignedUsers: CardCreateManyWithoutAssignedUserInput
  cards_users: CardCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  expenses: ExpenseCreateManyWithoutUserInput
  reviews: ReviewCreateManyWithoutUserInput
}

input UserCreateWithoutExpensesInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  username: String!
  cards_assignedUsers: CardCreateManyWithoutAssignedUserInput
  cards_users: CardCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  eventAdmins: EventAdminCreateManyWithoutUserInput
  reviews: ReviewCreateManyWithoutUserInput
}

input UserCreateWithoutReviewsInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  username: String!
  cards_assignedUsers: CardCreateManyWithoutAssignedUserInput
  cards_users: CardCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  eventAdmins: EventAdminCreateManyWithoutUserInput
  expenses: ExpenseCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  username_ASC
  username_DESC
}

type UserPreviousValues {
  id: Int!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  username: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  firstName: String
  lastName: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  username: String
  cards_assignedUsers: CardUpdateManyWithoutAssignedUserInput
  cards_users: CardUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  eventAdmins: EventAdminUpdateManyWithoutUserInput
  expenses: ExpenseUpdateManyWithoutUserInput
  reviews: ReviewUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: String
  firstName: String
  lastName: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  username: String
}

input UserUpdateOneWithoutCards_assignedUsersInput {
  create: UserCreateWithoutCards_assignedUsersInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCards_assignedUsersDataInput
  upsert: UserUpsertWithoutCards_assignedUsersInput
}

input UserUpdateOneWithoutCards_usersInput {
  create: UserCreateWithoutCards_usersInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCards_usersDataInput
  upsert: UserUpsertWithoutCards_usersInput
}

input UserUpdateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneWithoutEventAdminsInput {
  create: UserCreateWithoutEventAdminsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutEventAdminsDataInput
  upsert: UserUpsertWithoutEventAdminsInput
}

input UserUpdateOneWithoutExpensesInput {
  create: UserCreateWithoutExpensesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutExpensesDataInput
  upsert: UserUpsertWithoutExpensesInput
}

input UserUpdateOneWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutReviewsDataInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateWithoutCards_assignedUsersDataInput {
  email: String
  firstName: String
  lastName: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  username: String
  cards_users: CardUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  eventAdmins: EventAdminUpdateManyWithoutUserInput
  expenses: ExpenseUpdateManyWithoutUserInput
  reviews: ReviewUpdateManyWithoutUserInput
}

input UserUpdateWithoutCards_usersDataInput {
  email: String
  firstName: String
  lastName: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  username: String
  cards_assignedUsers: CardUpdateManyWithoutAssignedUserInput
  comments: CommentUpdateManyWithoutUserInput
  eventAdmins: EventAdminUpdateManyWithoutUserInput
  expenses: ExpenseUpdateManyWithoutUserInput
  reviews: ReviewUpdateManyWithoutUserInput
}

input UserUpdateWithoutCommentsDataInput {
  email: String
  firstName: String
  lastName: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  username: String
  cards_assignedUsers: CardUpdateManyWithoutAssignedUserInput
  cards_users: CardUpdateManyWithoutUserInput
  eventAdmins: EventAdminUpdateManyWithoutUserInput
  expenses: ExpenseUpdateManyWithoutUserInput
  reviews: ReviewUpdateManyWithoutUserInput
}

input UserUpdateWithoutEventAdminsDataInput {
  email: String
  firstName: String
  lastName: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  username: String
  cards_assignedUsers: CardUpdateManyWithoutAssignedUserInput
  cards_users: CardUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  expenses: ExpenseUpdateManyWithoutUserInput
  reviews: ReviewUpdateManyWithoutUserInput
}

input UserUpdateWithoutExpensesDataInput {
  email: String
  firstName: String
  lastName: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  username: String
  cards_assignedUsers: CardUpdateManyWithoutAssignedUserInput
  cards_users: CardUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  eventAdmins: EventAdminUpdateManyWithoutUserInput
  reviews: ReviewUpdateManyWithoutUserInput
}

input UserUpdateWithoutReviewsDataInput {
  email: String
  firstName: String
  lastName: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  username: String
  cards_assignedUsers: CardUpdateManyWithoutAssignedUserInput
  cards_users: CardUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  eventAdmins: EventAdminUpdateManyWithoutUserInput
  expenses: ExpenseUpdateManyWithoutUserInput
}

input UserUpsertWithoutCards_assignedUsersInput {
  update: UserUpdateWithoutCards_assignedUsersDataInput!
  create: UserCreateWithoutCards_assignedUsersInput!
}

input UserUpsertWithoutCards_usersInput {
  update: UserUpdateWithoutCards_usersDataInput!
  create: UserCreateWithoutCards_usersInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutEventAdminsInput {
  update: UserUpdateWithoutEventAdminsDataInput!
  create: UserCreateWithoutEventAdminsInput!
}

input UserUpsertWithoutExpensesInput {
  update: UserUpdateWithoutExpensesDataInput!
  create: UserCreateWithoutExpensesInput!
}

input UserUpsertWithoutReviewsInput {
  update: UserUpdateWithoutReviewsDataInput!
  create: UserCreateWithoutReviewsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  cards_assignedUsers_every: CardWhereInput
  cards_assignedUsers_some: CardWhereInput
  cards_assignedUsers_none: CardWhereInput
  cards_users_every: CardWhereInput
  cards_users_some: CardWhereInput
  cards_users_none: CardWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  eventAdmins_every: EventAdminWhereInput
  eventAdmins_some: EventAdminWhereInput
  eventAdmins_none: EventAdminWhereInput
  expenses_every: ExpenseWhereInput
  expenses_some: ExpenseWhereInput
  expenses_none: ExpenseWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
}

input UserWhereUniqueInput {
  id: Int
  email: String
  username: String
}
