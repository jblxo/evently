# source: http://localhost:4466
# timestamp: Mon Nov 26 2018 10:42:03 GMT+0100 (GMT+01:00)

type AggregateBoard {
  count: Int!
}

type AggregateCard {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateEvent_admin {
  count: Int!
}

type AggregateExpense {
  count: Int!
}

type AggregateList {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Board {
  id: Int!
  description: String
  id_event: Event
  lists(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [List!]
  title: String!
}

"""A connection to a list of items."""
type BoardConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BoardEdge]!
  aggregate: AggregateBoard!
}

input BoardCreateInput {
  description: String
  title: String!
  id_event: EventCreateOneWithoutBoardsInput
  lists: ListCreateManyWithoutId_boardInput
}

input BoardCreateManyWithoutId_eventInput {
  create: [BoardCreateWithoutId_eventInput!]
  connect: [BoardWhereUniqueInput!]
}

input BoardCreateOneWithoutListsInput {
  create: BoardCreateWithoutListsInput
  connect: BoardWhereUniqueInput
}

input BoardCreateWithoutId_eventInput {
  description: String
  title: String!
  lists: ListCreateManyWithoutId_boardInput
}

input BoardCreateWithoutListsInput {
  description: String
  title: String!
  id_event: EventCreateOneWithoutBoardsInput
}

"""An edge in a connection."""
type BoardEdge {
  """The item at the end of the edge."""
  node: Board!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BoardOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  title_ASC
  title_DESC
}

type BoardPreviousValues {
  id: Int!
  description: String
  title: String!
}

type BoardSubscriptionPayload {
  mutation: MutationType!
  node: Board
  updatedFields: [String!]
  previousValues: BoardPreviousValues
}

input BoardSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BoardSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BoardSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BoardSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BoardWhereInput
}

input BoardUpdateInput {
  description: String
  title: String
  id_event: EventUpdateOneWithoutBoardsInput
  lists: ListUpdateManyWithoutId_boardInput
}

input BoardUpdateManyMutationInput {
  description: String
  title: String
}

input BoardUpdateManyWithoutId_eventInput {
  create: [BoardCreateWithoutId_eventInput!]
  connect: [BoardWhereUniqueInput!]
  disconnect: [BoardWhereUniqueInput!]
  delete: [BoardWhereUniqueInput!]
  update: [BoardUpdateWithWhereUniqueWithoutId_eventInput!]
  upsert: [BoardUpsertWithWhereUniqueWithoutId_eventInput!]
}

input BoardUpdateOneWithoutListsInput {
  create: BoardCreateWithoutListsInput
  connect: BoardWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BoardUpdateWithoutListsDataInput
  upsert: BoardUpsertWithoutListsInput
}

input BoardUpdateWithoutId_eventDataInput {
  description: String
  title: String
  lists: ListUpdateManyWithoutId_boardInput
}

input BoardUpdateWithoutListsDataInput {
  description: String
  title: String
  id_event: EventUpdateOneWithoutBoardsInput
}

input BoardUpdateWithWhereUniqueWithoutId_eventInput {
  where: BoardWhereUniqueInput!
  data: BoardUpdateWithoutId_eventDataInput!
}

input BoardUpsertWithoutListsInput {
  update: BoardUpdateWithoutListsDataInput!
  create: BoardCreateWithoutListsInput!
}

input BoardUpsertWithWhereUniqueWithoutId_eventInput {
  where: BoardWhereUniqueInput!
  update: BoardUpdateWithoutId_eventDataInput!
  create: BoardCreateWithoutId_eventInput!
}

input BoardWhereInput {
  """Logical AND on all given filters."""
  AND: [BoardWhereInput!]

  """Logical OR on all given filters."""
  OR: [BoardWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BoardWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  id_event: EventWhereInput
  lists_every: ListWhereInput
  lists_some: ListWhereInput
  lists_none: ListWhereInput
}

input BoardWhereUniqueInput {
  id: Int
}

type Card {
  id: Int!
  created_at: DateTime!
  description: String
  id_list: List
  id_user: User
  order: Int!
  title: String!
}

"""A connection to a list of items."""
type CardConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CardEdge]!
  aggregate: AggregateCard!
}

input CardCreateInput {
  created_at: DateTime!
  description: String
  order: Int!
  title: String!
  id_list: ListCreateOneWithoutCardsInput
  id_user: UserCreateOneWithoutCardsInput
}

input CardCreateManyWithoutId_listInput {
  create: [CardCreateWithoutId_listInput!]
  connect: [CardWhereUniqueInput!]
}

input CardCreateManyWithoutId_userInput {
  create: [CardCreateWithoutId_userInput!]
  connect: [CardWhereUniqueInput!]
}

input CardCreateWithoutId_listInput {
  created_at: DateTime!
  description: String
  order: Int!
  title: String!
  id_user: UserCreateOneWithoutCardsInput
}

input CardCreateWithoutId_userInput {
  created_at: DateTime!
  description: String
  order: Int!
  title: String!
  id_list: ListCreateOneWithoutCardsInput
}

"""An edge in a connection."""
type CardEdge {
  """The item at the end of the edge."""
  node: Card!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CardOrderByInput {
  id_ASC
  id_DESC
  created_at_ASC
  created_at_DESC
  description_ASC
  description_DESC
  order_ASC
  order_DESC
  title_ASC
  title_DESC
}

type CardPreviousValues {
  id: Int!
  created_at: DateTime!
  description: String
  order: Int!
  title: String!
}

type CardSubscriptionPayload {
  mutation: MutationType!
  node: Card
  updatedFields: [String!]
  previousValues: CardPreviousValues
}

input CardSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CardSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CardSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CardSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CardWhereInput
}

input CardUpdateInput {
  created_at: DateTime
  description: String
  order: Int
  title: String
  id_list: ListUpdateOneWithoutCardsInput
  id_user: UserUpdateOneWithoutCardsInput
}

input CardUpdateManyMutationInput {
  created_at: DateTime
  description: String
  order: Int
  title: String
}

input CardUpdateManyWithoutId_listInput {
  create: [CardCreateWithoutId_listInput!]
  connect: [CardWhereUniqueInput!]
  disconnect: [CardWhereUniqueInput!]
  delete: [CardWhereUniqueInput!]
  update: [CardUpdateWithWhereUniqueWithoutId_listInput!]
  upsert: [CardUpsertWithWhereUniqueWithoutId_listInput!]
}

input CardUpdateManyWithoutId_userInput {
  create: [CardCreateWithoutId_userInput!]
  connect: [CardWhereUniqueInput!]
  disconnect: [CardWhereUniqueInput!]
  delete: [CardWhereUniqueInput!]
  update: [CardUpdateWithWhereUniqueWithoutId_userInput!]
  upsert: [CardUpsertWithWhereUniqueWithoutId_userInput!]
}

input CardUpdateWithoutId_listDataInput {
  created_at: DateTime
  description: String
  order: Int
  title: String
  id_user: UserUpdateOneWithoutCardsInput
}

input CardUpdateWithoutId_userDataInput {
  created_at: DateTime
  description: String
  order: Int
  title: String
  id_list: ListUpdateOneWithoutCardsInput
}

input CardUpdateWithWhereUniqueWithoutId_listInput {
  where: CardWhereUniqueInput!
  data: CardUpdateWithoutId_listDataInput!
}

input CardUpdateWithWhereUniqueWithoutId_userInput {
  where: CardWhereUniqueInput!
  data: CardUpdateWithoutId_userDataInput!
}

input CardUpsertWithWhereUniqueWithoutId_listInput {
  where: CardWhereUniqueInput!
  update: CardUpdateWithoutId_listDataInput!
  create: CardCreateWithoutId_listInput!
}

input CardUpsertWithWhereUniqueWithoutId_userInput {
  where: CardWhereUniqueInput!
  update: CardUpdateWithoutId_userDataInput!
  create: CardCreateWithoutId_userInput!
}

input CardWhereInput {
  """Logical AND on all given filters."""
  AND: [CardWhereInput!]

  """Logical OR on all given filters."""
  OR: [CardWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CardWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  created_at: DateTime

  """All values that are not equal to given value."""
  created_at_not: DateTime

  """All values that are contained in given list."""
  created_at_in: [DateTime!]

  """All values that are not contained in given list."""
  created_at_not_in: [DateTime!]

  """All values less than the given value."""
  created_at_lt: DateTime

  """All values less than or equal the given value."""
  created_at_lte: DateTime

  """All values greater than the given value."""
  created_at_gt: DateTime

  """All values greater than or equal the given value."""
  created_at_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  order: Int

  """All values that are not equal to given value."""
  order_not: Int

  """All values that are contained in given list."""
  order_in: [Int!]

  """All values that are not contained in given list."""
  order_not_in: [Int!]

  """All values less than the given value."""
  order_lt: Int

  """All values less than or equal the given value."""
  order_lte: Int

  """All values greater than the given value."""
  order_gt: Int

  """All values greater than or equal the given value."""
  order_gte: Int
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  id_list: ListWhereInput
  id_user: UserWhereInput
}

input CardWhereUniqueInput {
  id: Int
}

type Comment {
  id: Int!
  content: String!
  created_at: DateTime!
  id_event: Event
  id_user: User
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  content: String!
  created_at: DateTime!
  id_event: EventCreateOneWithoutCommentsInput
  id_user: UserCreateOneWithoutCommentsInput
}

input CommentCreateManyWithoutId_eventInput {
  create: [CommentCreateWithoutId_eventInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutId_userInput {
  create: [CommentCreateWithoutId_userInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutId_eventInput {
  content: String!
  created_at: DateTime!
  id_user: UserCreateOneWithoutCommentsInput
}

input CommentCreateWithoutId_userInput {
  content: String!
  created_at: DateTime!
  id_event: EventCreateOneWithoutCommentsInput
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  created_at_ASC
  created_at_DESC
}

type CommentPreviousValues {
  id: Int!
  content: String!
  created_at: DateTime!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateInput {
  content: String
  created_at: DateTime
  id_event: EventUpdateOneWithoutCommentsInput
  id_user: UserUpdateOneWithoutCommentsInput
}

input CommentUpdateManyMutationInput {
  content: String
  created_at: DateTime
}

input CommentUpdateManyWithoutId_eventInput {
  create: [CommentCreateWithoutId_eventInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutId_eventInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutId_eventInput!]
}

input CommentUpdateManyWithoutId_userInput {
  create: [CommentCreateWithoutId_userInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutId_userInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutId_userInput!]
}

input CommentUpdateWithoutId_eventDataInput {
  content: String
  created_at: DateTime
  id_user: UserUpdateOneWithoutCommentsInput
}

input CommentUpdateWithoutId_userDataInput {
  content: String
  created_at: DateTime
  id_event: EventUpdateOneWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutId_eventInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutId_eventDataInput!
}

input CommentUpdateWithWhereUniqueWithoutId_userInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutId_userDataInput!
}

input CommentUpsertWithWhereUniqueWithoutId_eventInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutId_eventDataInput!
  create: CommentCreateWithoutId_eventInput!
}

input CommentUpsertWithWhereUniqueWithoutId_userInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutId_userDataInput!
  create: CommentCreateWithoutId_userInput!
}

input CommentWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  created_at: DateTime

  """All values that are not equal to given value."""
  created_at_not: DateTime

  """All values that are contained in given list."""
  created_at_in: [DateTime!]

  """All values that are not contained in given list."""
  created_at_not_in: [DateTime!]

  """All values less than the given value."""
  created_at_lt: DateTime

  """All values less than or equal the given value."""
  created_at_lte: DateTime

  """All values greater than the given value."""
  created_at_gt: DateTime

  """All values greater than or equal the given value."""
  created_at_gte: DateTime
  id_event: EventWhereInput
  id_user: UserWhereInput
}

input CommentWhereUniqueInput {
  id: Int
}

scalar DateTime

type Event {
  id: Int!
  address1: String!
  address2: String!
  address3: String!
  boards(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board!]
  budget: Int!
  city: String!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  country: String!
  description: String
  entrance_tax: Int
  event_admins(where: Event_adminWhereInput, orderBy: Event_adminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event_admin!]
  event_creation: DateTime!
  event_date: DateTime!
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense!]
  image_large: String
  image_small: String
  rating: Int!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  state: String!
  title: String!
  zip: String!
}

type Event_admin {
  id: Int!
  id_event: Event
  id_role: Role
  id_user: User
}

"""A connection to a list of items."""
type Event_adminConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [Event_adminEdge]!
  aggregate: AggregateEvent_admin!
}

input Event_adminCreateInput {
  id_event: EventCreateOneWithoutEvent_adminsInput
  id_role: RoleCreateOneWithoutEvent_adminsInput
  id_user: UserCreateOneWithoutEvent_adminsInput
}

input Event_adminCreateManyWithoutId_eventInput {
  create: [Event_adminCreateWithoutId_eventInput!]
  connect: [Event_adminWhereUniqueInput!]
}

input Event_adminCreateManyWithoutId_roleInput {
  create: [Event_adminCreateWithoutId_roleInput!]
  connect: [Event_adminWhereUniqueInput!]
}

input Event_adminCreateManyWithoutId_userInput {
  create: [Event_adminCreateWithoutId_userInput!]
  connect: [Event_adminWhereUniqueInput!]
}

input Event_adminCreateWithoutId_eventInput {
  id_role: RoleCreateOneWithoutEvent_adminsInput
  id_user: UserCreateOneWithoutEvent_adminsInput
}

input Event_adminCreateWithoutId_roleInput {
  id_event: EventCreateOneWithoutEvent_adminsInput
  id_user: UserCreateOneWithoutEvent_adminsInput
}

input Event_adminCreateWithoutId_userInput {
  id_event: EventCreateOneWithoutEvent_adminsInput
  id_role: RoleCreateOneWithoutEvent_adminsInput
}

"""An edge in a connection."""
type Event_adminEdge {
  """The item at the end of the edge."""
  node: Event_admin!

  """A cursor for use in pagination."""
  cursor: String!
}

enum Event_adminOrderByInput {
  id_ASC
  id_DESC
}

type Event_adminPreviousValues {
  id: Int!
}

type Event_adminSubscriptionPayload {
  mutation: MutationType!
  node: Event_admin
  updatedFields: [String!]
  previousValues: Event_adminPreviousValues
}

input Event_adminSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [Event_adminSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [Event_adminSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [Event_adminSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Event_adminWhereInput
}

input Event_adminUpdateInput {
  id_event: EventUpdateOneWithoutEvent_adminsInput
  id_role: RoleUpdateOneWithoutEvent_adminsInput
  id_user: UserUpdateOneWithoutEvent_adminsInput
}

input Event_adminUpdateManyWithoutId_eventInput {
  create: [Event_adminCreateWithoutId_eventInput!]
  connect: [Event_adminWhereUniqueInput!]
  disconnect: [Event_adminWhereUniqueInput!]
  delete: [Event_adminWhereUniqueInput!]
  update: [Event_adminUpdateWithWhereUniqueWithoutId_eventInput!]
  upsert: [Event_adminUpsertWithWhereUniqueWithoutId_eventInput!]
}

input Event_adminUpdateManyWithoutId_roleInput {
  create: [Event_adminCreateWithoutId_roleInput!]
  connect: [Event_adminWhereUniqueInput!]
  disconnect: [Event_adminWhereUniqueInput!]
  delete: [Event_adminWhereUniqueInput!]
  update: [Event_adminUpdateWithWhereUniqueWithoutId_roleInput!]
  upsert: [Event_adminUpsertWithWhereUniqueWithoutId_roleInput!]
}

input Event_adminUpdateManyWithoutId_userInput {
  create: [Event_adminCreateWithoutId_userInput!]
  connect: [Event_adminWhereUniqueInput!]
  disconnect: [Event_adminWhereUniqueInput!]
  delete: [Event_adminWhereUniqueInput!]
  update: [Event_adminUpdateWithWhereUniqueWithoutId_userInput!]
  upsert: [Event_adminUpsertWithWhereUniqueWithoutId_userInput!]
}

input Event_adminUpdateWithoutId_eventDataInput {
  id_role: RoleUpdateOneWithoutEvent_adminsInput
  id_user: UserUpdateOneWithoutEvent_adminsInput
}

input Event_adminUpdateWithoutId_roleDataInput {
  id_event: EventUpdateOneWithoutEvent_adminsInput
  id_user: UserUpdateOneWithoutEvent_adminsInput
}

input Event_adminUpdateWithoutId_userDataInput {
  id_event: EventUpdateOneWithoutEvent_adminsInput
  id_role: RoleUpdateOneWithoutEvent_adminsInput
}

input Event_adminUpdateWithWhereUniqueWithoutId_eventInput {
  where: Event_adminWhereUniqueInput!
  data: Event_adminUpdateWithoutId_eventDataInput!
}

input Event_adminUpdateWithWhereUniqueWithoutId_roleInput {
  where: Event_adminWhereUniqueInput!
  data: Event_adminUpdateWithoutId_roleDataInput!
}

input Event_adminUpdateWithWhereUniqueWithoutId_userInput {
  where: Event_adminWhereUniqueInput!
  data: Event_adminUpdateWithoutId_userDataInput!
}

input Event_adminUpsertWithWhereUniqueWithoutId_eventInput {
  where: Event_adminWhereUniqueInput!
  update: Event_adminUpdateWithoutId_eventDataInput!
  create: Event_adminCreateWithoutId_eventInput!
}

input Event_adminUpsertWithWhereUniqueWithoutId_roleInput {
  where: Event_adminWhereUniqueInput!
  update: Event_adminUpdateWithoutId_roleDataInput!
  create: Event_adminCreateWithoutId_roleInput!
}

input Event_adminUpsertWithWhereUniqueWithoutId_userInput {
  where: Event_adminWhereUniqueInput!
  update: Event_adminUpdateWithoutId_userDataInput!
  create: Event_adminCreateWithoutId_userInput!
}

input Event_adminWhereInput {
  """Logical AND on all given filters."""
  AND: [Event_adminWhereInput!]

  """Logical OR on all given filters."""
  OR: [Event_adminWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [Event_adminWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  id_event: EventWhereInput
  id_role: RoleWhereInput
  id_user: UserWhereInput
}

input Event_adminWhereUniqueInput {
  id: Int
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  address1: String!
  address2: String!
  address3: String!
  budget: Int!
  city: String!
  country: String!
  description: String
  entrance_tax: Int
  event_creation: DateTime!
  event_date: DateTime!
  image_large: String
  image_small: String
  rating: Int!
  state: String!
  title: String!
  zip: String!
  boards: BoardCreateManyWithoutId_eventInput
  comments: CommentCreateManyWithoutId_eventInput
  event_admins: Event_adminCreateManyWithoutId_eventInput
  expenses: ExpenseCreateManyWithoutId_eventInput
  reviews: ReviewCreateManyWithoutId_eventsInput
}

input EventCreateOneWithoutBoardsInput {
  create: EventCreateWithoutBoardsInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutCommentsInput {
  create: EventCreateWithoutCommentsInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutEvent_adminsInput {
  create: EventCreateWithoutEvent_adminsInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutExpensesInput {
  create: EventCreateWithoutExpensesInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutReviewsInput {
  create: EventCreateWithoutReviewsInput
  connect: EventWhereUniqueInput
}

input EventCreateWithoutBoardsInput {
  address1: String!
  address2: String!
  address3: String!
  budget: Int!
  city: String!
  country: String!
  description: String
  entrance_tax: Int
  event_creation: DateTime!
  event_date: DateTime!
  image_large: String
  image_small: String
  rating: Int!
  state: String!
  title: String!
  zip: String!
  comments: CommentCreateManyWithoutId_eventInput
  event_admins: Event_adminCreateManyWithoutId_eventInput
  expenses: ExpenseCreateManyWithoutId_eventInput
  reviews: ReviewCreateManyWithoutId_eventsInput
}

input EventCreateWithoutCommentsInput {
  address1: String!
  address2: String!
  address3: String!
  budget: Int!
  city: String!
  country: String!
  description: String
  entrance_tax: Int
  event_creation: DateTime!
  event_date: DateTime!
  image_large: String
  image_small: String
  rating: Int!
  state: String!
  title: String!
  zip: String!
  boards: BoardCreateManyWithoutId_eventInput
  event_admins: Event_adminCreateManyWithoutId_eventInput
  expenses: ExpenseCreateManyWithoutId_eventInput
  reviews: ReviewCreateManyWithoutId_eventsInput
}

input EventCreateWithoutEvent_adminsInput {
  address1: String!
  address2: String!
  address3: String!
  budget: Int!
  city: String!
  country: String!
  description: String
  entrance_tax: Int
  event_creation: DateTime!
  event_date: DateTime!
  image_large: String
  image_small: String
  rating: Int!
  state: String!
  title: String!
  zip: String!
  boards: BoardCreateManyWithoutId_eventInput
  comments: CommentCreateManyWithoutId_eventInput
  expenses: ExpenseCreateManyWithoutId_eventInput
  reviews: ReviewCreateManyWithoutId_eventsInput
}

input EventCreateWithoutExpensesInput {
  address1: String!
  address2: String!
  address3: String!
  budget: Int!
  city: String!
  country: String!
  description: String
  entrance_tax: Int
  event_creation: DateTime!
  event_date: DateTime!
  image_large: String
  image_small: String
  rating: Int!
  state: String!
  title: String!
  zip: String!
  boards: BoardCreateManyWithoutId_eventInput
  comments: CommentCreateManyWithoutId_eventInput
  event_admins: Event_adminCreateManyWithoutId_eventInput
  reviews: ReviewCreateManyWithoutId_eventsInput
}

input EventCreateWithoutReviewsInput {
  address1: String!
  address2: String!
  address3: String!
  budget: Int!
  city: String!
  country: String!
  description: String
  entrance_tax: Int
  event_creation: DateTime!
  event_date: DateTime!
  image_large: String
  image_small: String
  rating: Int!
  state: String!
  title: String!
  zip: String!
  boards: BoardCreateManyWithoutId_eventInput
  comments: CommentCreateManyWithoutId_eventInput
  event_admins: Event_adminCreateManyWithoutId_eventInput
  expenses: ExpenseCreateManyWithoutId_eventInput
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  address1_ASC
  address1_DESC
  address2_ASC
  address2_DESC
  address3_ASC
  address3_DESC
  budget_ASC
  budget_DESC
  city_ASC
  city_DESC
  country_ASC
  country_DESC
  description_ASC
  description_DESC
  entrance_tax_ASC
  entrance_tax_DESC
  event_creation_ASC
  event_creation_DESC
  event_date_ASC
  event_date_DESC
  image_large_ASC
  image_large_DESC
  image_small_ASC
  image_small_DESC
  rating_ASC
  rating_DESC
  state_ASC
  state_DESC
  title_ASC
  title_DESC
  zip_ASC
  zip_DESC
}

type EventPreviousValues {
  id: Int!
  address1: String!
  address2: String!
  address3: String!
  budget: Int!
  city: String!
  country: String!
  description: String
  entrance_tax: Int
  event_creation: DateTime!
  event_date: DateTime!
  image_large: String
  image_small: String
  rating: Int!
  state: String!
  title: String!
  zip: String!
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

input EventUpdateInput {
  address1: String
  address2: String
  address3: String
  budget: Int
  city: String
  country: String
  description: String
  entrance_tax: Int
  event_creation: DateTime
  event_date: DateTime
  image_large: String
  image_small: String
  rating: Int
  state: String
  title: String
  zip: String
  boards: BoardUpdateManyWithoutId_eventInput
  comments: CommentUpdateManyWithoutId_eventInput
  event_admins: Event_adminUpdateManyWithoutId_eventInput
  expenses: ExpenseUpdateManyWithoutId_eventInput
  reviews: ReviewUpdateManyWithoutId_eventsInput
}

input EventUpdateManyMutationInput {
  address1: String
  address2: String
  address3: String
  budget: Int
  city: String
  country: String
  description: String
  entrance_tax: Int
  event_creation: DateTime
  event_date: DateTime
  image_large: String
  image_small: String
  rating: Int
  state: String
  title: String
  zip: String
}

input EventUpdateOneWithoutBoardsInput {
  create: EventCreateWithoutBoardsInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventUpdateWithoutBoardsDataInput
  upsert: EventUpsertWithoutBoardsInput
}

input EventUpdateOneWithoutCommentsInput {
  create: EventCreateWithoutCommentsInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventUpdateWithoutCommentsDataInput
  upsert: EventUpsertWithoutCommentsInput
}

input EventUpdateOneWithoutEvent_adminsInput {
  create: EventCreateWithoutEvent_adminsInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventUpdateWithoutEvent_adminsDataInput
  upsert: EventUpsertWithoutEvent_adminsInput
}

input EventUpdateOneWithoutExpensesInput {
  create: EventCreateWithoutExpensesInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventUpdateWithoutExpensesDataInput
  upsert: EventUpsertWithoutExpensesInput
}

input EventUpdateOneWithoutReviewsInput {
  create: EventCreateWithoutReviewsInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventUpdateWithoutReviewsDataInput
  upsert: EventUpsertWithoutReviewsInput
}

input EventUpdateWithoutBoardsDataInput {
  address1: String
  address2: String
  address3: String
  budget: Int
  city: String
  country: String
  description: String
  entrance_tax: Int
  event_creation: DateTime
  event_date: DateTime
  image_large: String
  image_small: String
  rating: Int
  state: String
  title: String
  zip: String
  comments: CommentUpdateManyWithoutId_eventInput
  event_admins: Event_adminUpdateManyWithoutId_eventInput
  expenses: ExpenseUpdateManyWithoutId_eventInput
  reviews: ReviewUpdateManyWithoutId_eventsInput
}

input EventUpdateWithoutCommentsDataInput {
  address1: String
  address2: String
  address3: String
  budget: Int
  city: String
  country: String
  description: String
  entrance_tax: Int
  event_creation: DateTime
  event_date: DateTime
  image_large: String
  image_small: String
  rating: Int
  state: String
  title: String
  zip: String
  boards: BoardUpdateManyWithoutId_eventInput
  event_admins: Event_adminUpdateManyWithoutId_eventInput
  expenses: ExpenseUpdateManyWithoutId_eventInput
  reviews: ReviewUpdateManyWithoutId_eventsInput
}

input EventUpdateWithoutEvent_adminsDataInput {
  address1: String
  address2: String
  address3: String
  budget: Int
  city: String
  country: String
  description: String
  entrance_tax: Int
  event_creation: DateTime
  event_date: DateTime
  image_large: String
  image_small: String
  rating: Int
  state: String
  title: String
  zip: String
  boards: BoardUpdateManyWithoutId_eventInput
  comments: CommentUpdateManyWithoutId_eventInput
  expenses: ExpenseUpdateManyWithoutId_eventInput
  reviews: ReviewUpdateManyWithoutId_eventsInput
}

input EventUpdateWithoutExpensesDataInput {
  address1: String
  address2: String
  address3: String
  budget: Int
  city: String
  country: String
  description: String
  entrance_tax: Int
  event_creation: DateTime
  event_date: DateTime
  image_large: String
  image_small: String
  rating: Int
  state: String
  title: String
  zip: String
  boards: BoardUpdateManyWithoutId_eventInput
  comments: CommentUpdateManyWithoutId_eventInput
  event_admins: Event_adminUpdateManyWithoutId_eventInput
  reviews: ReviewUpdateManyWithoutId_eventsInput
}

input EventUpdateWithoutReviewsDataInput {
  address1: String
  address2: String
  address3: String
  budget: Int
  city: String
  country: String
  description: String
  entrance_tax: Int
  event_creation: DateTime
  event_date: DateTime
  image_large: String
  image_small: String
  rating: Int
  state: String
  title: String
  zip: String
  boards: BoardUpdateManyWithoutId_eventInput
  comments: CommentUpdateManyWithoutId_eventInput
  event_admins: Event_adminUpdateManyWithoutId_eventInput
  expenses: ExpenseUpdateManyWithoutId_eventInput
}

input EventUpsertWithoutBoardsInput {
  update: EventUpdateWithoutBoardsDataInput!
  create: EventCreateWithoutBoardsInput!
}

input EventUpsertWithoutCommentsInput {
  update: EventUpdateWithoutCommentsDataInput!
  create: EventCreateWithoutCommentsInput!
}

input EventUpsertWithoutEvent_adminsInput {
  update: EventUpdateWithoutEvent_adminsDataInput!
  create: EventCreateWithoutEvent_adminsInput!
}

input EventUpsertWithoutExpensesInput {
  update: EventUpdateWithoutExpensesDataInput!
  create: EventCreateWithoutExpensesInput!
}

input EventUpsertWithoutReviewsInput {
  update: EventUpdateWithoutReviewsDataInput!
  create: EventCreateWithoutReviewsInput!
}

input EventWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  address1: String

  """All values that are not equal to given value."""
  address1_not: String

  """All values that are contained in given list."""
  address1_in: [String!]

  """All values that are not contained in given list."""
  address1_not_in: [String!]

  """All values less than the given value."""
  address1_lt: String

  """All values less than or equal the given value."""
  address1_lte: String

  """All values greater than the given value."""
  address1_gt: String

  """All values greater than or equal the given value."""
  address1_gte: String

  """All values containing the given string."""
  address1_contains: String

  """All values not containing the given string."""
  address1_not_contains: String

  """All values starting with the given string."""
  address1_starts_with: String

  """All values not starting with the given string."""
  address1_not_starts_with: String

  """All values ending with the given string."""
  address1_ends_with: String

  """All values not ending with the given string."""
  address1_not_ends_with: String
  address2: String

  """All values that are not equal to given value."""
  address2_not: String

  """All values that are contained in given list."""
  address2_in: [String!]

  """All values that are not contained in given list."""
  address2_not_in: [String!]

  """All values less than the given value."""
  address2_lt: String

  """All values less than or equal the given value."""
  address2_lte: String

  """All values greater than the given value."""
  address2_gt: String

  """All values greater than or equal the given value."""
  address2_gte: String

  """All values containing the given string."""
  address2_contains: String

  """All values not containing the given string."""
  address2_not_contains: String

  """All values starting with the given string."""
  address2_starts_with: String

  """All values not starting with the given string."""
  address2_not_starts_with: String

  """All values ending with the given string."""
  address2_ends_with: String

  """All values not ending with the given string."""
  address2_not_ends_with: String
  address3: String

  """All values that are not equal to given value."""
  address3_not: String

  """All values that are contained in given list."""
  address3_in: [String!]

  """All values that are not contained in given list."""
  address3_not_in: [String!]

  """All values less than the given value."""
  address3_lt: String

  """All values less than or equal the given value."""
  address3_lte: String

  """All values greater than the given value."""
  address3_gt: String

  """All values greater than or equal the given value."""
  address3_gte: String

  """All values containing the given string."""
  address3_contains: String

  """All values not containing the given string."""
  address3_not_contains: String

  """All values starting with the given string."""
  address3_starts_with: String

  """All values not starting with the given string."""
  address3_not_starts_with: String

  """All values ending with the given string."""
  address3_ends_with: String

  """All values not ending with the given string."""
  address3_not_ends_with: String
  budget: Int

  """All values that are not equal to given value."""
  budget_not: Int

  """All values that are contained in given list."""
  budget_in: [Int!]

  """All values that are not contained in given list."""
  budget_not_in: [Int!]

  """All values less than the given value."""
  budget_lt: Int

  """All values less than or equal the given value."""
  budget_lte: Int

  """All values greater than the given value."""
  budget_gt: Int

  """All values greater than or equal the given value."""
  budget_gte: Int
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  entrance_tax: Int

  """All values that are not equal to given value."""
  entrance_tax_not: Int

  """All values that are contained in given list."""
  entrance_tax_in: [Int!]

  """All values that are not contained in given list."""
  entrance_tax_not_in: [Int!]

  """All values less than the given value."""
  entrance_tax_lt: Int

  """All values less than or equal the given value."""
  entrance_tax_lte: Int

  """All values greater than the given value."""
  entrance_tax_gt: Int

  """All values greater than or equal the given value."""
  entrance_tax_gte: Int
  event_creation: DateTime

  """All values that are not equal to given value."""
  event_creation_not: DateTime

  """All values that are contained in given list."""
  event_creation_in: [DateTime!]

  """All values that are not contained in given list."""
  event_creation_not_in: [DateTime!]

  """All values less than the given value."""
  event_creation_lt: DateTime

  """All values less than or equal the given value."""
  event_creation_lte: DateTime

  """All values greater than the given value."""
  event_creation_gt: DateTime

  """All values greater than or equal the given value."""
  event_creation_gte: DateTime
  event_date: DateTime

  """All values that are not equal to given value."""
  event_date_not: DateTime

  """All values that are contained in given list."""
  event_date_in: [DateTime!]

  """All values that are not contained in given list."""
  event_date_not_in: [DateTime!]

  """All values less than the given value."""
  event_date_lt: DateTime

  """All values less than or equal the given value."""
  event_date_lte: DateTime

  """All values greater than the given value."""
  event_date_gt: DateTime

  """All values greater than or equal the given value."""
  event_date_gte: DateTime
  image_large: String

  """All values that are not equal to given value."""
  image_large_not: String

  """All values that are contained in given list."""
  image_large_in: [String!]

  """All values that are not contained in given list."""
  image_large_not_in: [String!]

  """All values less than the given value."""
  image_large_lt: String

  """All values less than or equal the given value."""
  image_large_lte: String

  """All values greater than the given value."""
  image_large_gt: String

  """All values greater than or equal the given value."""
  image_large_gte: String

  """All values containing the given string."""
  image_large_contains: String

  """All values not containing the given string."""
  image_large_not_contains: String

  """All values starting with the given string."""
  image_large_starts_with: String

  """All values not starting with the given string."""
  image_large_not_starts_with: String

  """All values ending with the given string."""
  image_large_ends_with: String

  """All values not ending with the given string."""
  image_large_not_ends_with: String
  image_small: String

  """All values that are not equal to given value."""
  image_small_not: String

  """All values that are contained in given list."""
  image_small_in: [String!]

  """All values that are not contained in given list."""
  image_small_not_in: [String!]

  """All values less than the given value."""
  image_small_lt: String

  """All values less than or equal the given value."""
  image_small_lte: String

  """All values greater than the given value."""
  image_small_gt: String

  """All values greater than or equal the given value."""
  image_small_gte: String

  """All values containing the given string."""
  image_small_contains: String

  """All values not containing the given string."""
  image_small_not_contains: String

  """All values starting with the given string."""
  image_small_starts_with: String

  """All values not starting with the given string."""
  image_small_not_starts_with: String

  """All values ending with the given string."""
  image_small_ends_with: String

  """All values not ending with the given string."""
  image_small_not_ends_with: String
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  zip: String

  """All values that are not equal to given value."""
  zip_not: String

  """All values that are contained in given list."""
  zip_in: [String!]

  """All values that are not contained in given list."""
  zip_not_in: [String!]

  """All values less than the given value."""
  zip_lt: String

  """All values less than or equal the given value."""
  zip_lte: String

  """All values greater than the given value."""
  zip_gt: String

  """All values greater than or equal the given value."""
  zip_gte: String

  """All values containing the given string."""
  zip_contains: String

  """All values not containing the given string."""
  zip_not_contains: String

  """All values starting with the given string."""
  zip_starts_with: String

  """All values not starting with the given string."""
  zip_not_starts_with: String

  """All values ending with the given string."""
  zip_ends_with: String

  """All values not ending with the given string."""
  zip_not_ends_with: String
  boards_every: BoardWhereInput
  boards_some: BoardWhereInput
  boards_none: BoardWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  event_admins_every: Event_adminWhereInput
  event_admins_some: Event_adminWhereInput
  event_admins_none: Event_adminWhereInput
  expenses_every: ExpenseWhereInput
  expenses_some: ExpenseWhereInput
  expenses_none: ExpenseWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
}

input EventWhereUniqueInput {
  id: Int
}

type Expense {
  id: Int!
  amount: Float!
  created_at: DateTime!
  description: String
  id_event: Event
  id_user: User
  title: String!
}

"""A connection to a list of items."""
type ExpenseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExpenseEdge]!
  aggregate: AggregateExpense!
}

input ExpenseCreateInput {
  amount: Float!
  created_at: DateTime!
  description: String
  title: String!
  id_event: EventCreateOneWithoutExpensesInput
  id_user: UserCreateOneWithoutExpensesInput
}

input ExpenseCreateManyWithoutId_eventInput {
  create: [ExpenseCreateWithoutId_eventInput!]
  connect: [ExpenseWhereUniqueInput!]
}

input ExpenseCreateManyWithoutId_userInput {
  create: [ExpenseCreateWithoutId_userInput!]
  connect: [ExpenseWhereUniqueInput!]
}

input ExpenseCreateWithoutId_eventInput {
  amount: Float!
  created_at: DateTime!
  description: String
  title: String!
  id_user: UserCreateOneWithoutExpensesInput
}

input ExpenseCreateWithoutId_userInput {
  amount: Float!
  created_at: DateTime!
  description: String
  title: String!
  id_event: EventCreateOneWithoutExpensesInput
}

"""An edge in a connection."""
type ExpenseEdge {
  """The item at the end of the edge."""
  node: Expense!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ExpenseOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  created_at_ASC
  created_at_DESC
  description_ASC
  description_DESC
  title_ASC
  title_DESC
}

type ExpensePreviousValues {
  id: Int!
  amount: Float!
  created_at: DateTime!
  description: String
  title: String!
}

type ExpenseSubscriptionPayload {
  mutation: MutationType!
  node: Expense
  updatedFields: [String!]
  previousValues: ExpensePreviousValues
}

input ExpenseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ExpenseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExpenseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExpenseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ExpenseWhereInput
}

input ExpenseUpdateInput {
  amount: Float
  created_at: DateTime
  description: String
  title: String
  id_event: EventUpdateOneWithoutExpensesInput
  id_user: UserUpdateOneWithoutExpensesInput
}

input ExpenseUpdateManyMutationInput {
  amount: Float
  created_at: DateTime
  description: String
  title: String
}

input ExpenseUpdateManyWithoutId_eventInput {
  create: [ExpenseCreateWithoutId_eventInput!]
  connect: [ExpenseWhereUniqueInput!]
  disconnect: [ExpenseWhereUniqueInput!]
  delete: [ExpenseWhereUniqueInput!]
  update: [ExpenseUpdateWithWhereUniqueWithoutId_eventInput!]
  upsert: [ExpenseUpsertWithWhereUniqueWithoutId_eventInput!]
}

input ExpenseUpdateManyWithoutId_userInput {
  create: [ExpenseCreateWithoutId_userInput!]
  connect: [ExpenseWhereUniqueInput!]
  disconnect: [ExpenseWhereUniqueInput!]
  delete: [ExpenseWhereUniqueInput!]
  update: [ExpenseUpdateWithWhereUniqueWithoutId_userInput!]
  upsert: [ExpenseUpsertWithWhereUniqueWithoutId_userInput!]
}

input ExpenseUpdateWithoutId_eventDataInput {
  amount: Float
  created_at: DateTime
  description: String
  title: String
  id_user: UserUpdateOneWithoutExpensesInput
}

input ExpenseUpdateWithoutId_userDataInput {
  amount: Float
  created_at: DateTime
  description: String
  title: String
  id_event: EventUpdateOneWithoutExpensesInput
}

input ExpenseUpdateWithWhereUniqueWithoutId_eventInput {
  where: ExpenseWhereUniqueInput!
  data: ExpenseUpdateWithoutId_eventDataInput!
}

input ExpenseUpdateWithWhereUniqueWithoutId_userInput {
  where: ExpenseWhereUniqueInput!
  data: ExpenseUpdateWithoutId_userDataInput!
}

input ExpenseUpsertWithWhereUniqueWithoutId_eventInput {
  where: ExpenseWhereUniqueInput!
  update: ExpenseUpdateWithoutId_eventDataInput!
  create: ExpenseCreateWithoutId_eventInput!
}

input ExpenseUpsertWithWhereUniqueWithoutId_userInput {
  where: ExpenseWhereUniqueInput!
  update: ExpenseUpdateWithoutId_userDataInput!
  create: ExpenseCreateWithoutId_userInput!
}

input ExpenseWhereInput {
  """Logical AND on all given filters."""
  AND: [ExpenseWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExpenseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExpenseWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  created_at: DateTime

  """All values that are not equal to given value."""
  created_at_not: DateTime

  """All values that are contained in given list."""
  created_at_in: [DateTime!]

  """All values that are not contained in given list."""
  created_at_not_in: [DateTime!]

  """All values less than the given value."""
  created_at_lt: DateTime

  """All values less than or equal the given value."""
  created_at_lte: DateTime

  """All values greater than the given value."""
  created_at_gt: DateTime

  """All values greater than or equal the given value."""
  created_at_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  id_event: EventWhereInput
  id_user: UserWhereInput
}

input ExpenseWhereUniqueInput {
  id: Int
}

type List {
  id: Int!
  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card!]
  created_at: DateTime!
  description: String
  id_board: Board
  order: Int!
  title: String!
}

"""A connection to a list of items."""
type ListConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ListEdge]!
  aggregate: AggregateList!
}

input ListCreateInput {
  created_at: DateTime!
  description: String
  order: Int!
  title: String!
  cards: CardCreateManyWithoutId_listInput
  id_board: BoardCreateOneWithoutListsInput
}

input ListCreateManyWithoutId_boardInput {
  create: [ListCreateWithoutId_boardInput!]
  connect: [ListWhereUniqueInput!]
}

input ListCreateOneWithoutCardsInput {
  create: ListCreateWithoutCardsInput
  connect: ListWhereUniqueInput
}

input ListCreateWithoutCardsInput {
  created_at: DateTime!
  description: String
  order: Int!
  title: String!
  id_board: BoardCreateOneWithoutListsInput
}

input ListCreateWithoutId_boardInput {
  created_at: DateTime!
  description: String
  order: Int!
  title: String!
  cards: CardCreateManyWithoutId_listInput
}

"""An edge in a connection."""
type ListEdge {
  """The item at the end of the edge."""
  node: List!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ListOrderByInput {
  id_ASC
  id_DESC
  created_at_ASC
  created_at_DESC
  description_ASC
  description_DESC
  order_ASC
  order_DESC
  title_ASC
  title_DESC
}

type ListPreviousValues {
  id: Int!
  created_at: DateTime!
  description: String
  order: Int!
  title: String!
}

type ListSubscriptionPayload {
  mutation: MutationType!
  node: List
  updatedFields: [String!]
  previousValues: ListPreviousValues
}

input ListSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ListSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ListSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ListSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ListWhereInput
}

input ListUpdateInput {
  created_at: DateTime
  description: String
  order: Int
  title: String
  cards: CardUpdateManyWithoutId_listInput
  id_board: BoardUpdateOneWithoutListsInput
}

input ListUpdateManyMutationInput {
  created_at: DateTime
  description: String
  order: Int
  title: String
}

input ListUpdateManyWithoutId_boardInput {
  create: [ListCreateWithoutId_boardInput!]
  connect: [ListWhereUniqueInput!]
  disconnect: [ListWhereUniqueInput!]
  delete: [ListWhereUniqueInput!]
  update: [ListUpdateWithWhereUniqueWithoutId_boardInput!]
  upsert: [ListUpsertWithWhereUniqueWithoutId_boardInput!]
}

input ListUpdateOneWithoutCardsInput {
  create: ListCreateWithoutCardsInput
  connect: ListWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ListUpdateWithoutCardsDataInput
  upsert: ListUpsertWithoutCardsInput
}

input ListUpdateWithoutCardsDataInput {
  created_at: DateTime
  description: String
  order: Int
  title: String
  id_board: BoardUpdateOneWithoutListsInput
}

input ListUpdateWithoutId_boardDataInput {
  created_at: DateTime
  description: String
  order: Int
  title: String
  cards: CardUpdateManyWithoutId_listInput
}

input ListUpdateWithWhereUniqueWithoutId_boardInput {
  where: ListWhereUniqueInput!
  data: ListUpdateWithoutId_boardDataInput!
}

input ListUpsertWithoutCardsInput {
  update: ListUpdateWithoutCardsDataInput!
  create: ListCreateWithoutCardsInput!
}

input ListUpsertWithWhereUniqueWithoutId_boardInput {
  where: ListWhereUniqueInput!
  update: ListUpdateWithoutId_boardDataInput!
  create: ListCreateWithoutId_boardInput!
}

input ListWhereInput {
  """Logical AND on all given filters."""
  AND: [ListWhereInput!]

  """Logical OR on all given filters."""
  OR: [ListWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ListWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  created_at: DateTime

  """All values that are not equal to given value."""
  created_at_not: DateTime

  """All values that are contained in given list."""
  created_at_in: [DateTime!]

  """All values that are not contained in given list."""
  created_at_not_in: [DateTime!]

  """All values less than the given value."""
  created_at_lt: DateTime

  """All values less than or equal the given value."""
  created_at_lte: DateTime

  """All values greater than the given value."""
  created_at_gt: DateTime

  """All values greater than or equal the given value."""
  created_at_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  order: Int

  """All values that are not equal to given value."""
  order_not: Int

  """All values that are contained in given list."""
  order_in: [Int!]

  """All values that are not contained in given list."""
  order_not_in: [Int!]

  """All values less than the given value."""
  order_lt: Int

  """All values less than or equal the given value."""
  order_lte: Int

  """All values greater than the given value."""
  order_gt: Int

  """All values greater than or equal the given value."""
  order_gte: Int
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  cards_every: CardWhereInput
  cards_some: CardWhereInput
  cards_none: CardWhereInput
  id_board: BoardWhereInput
}

input ListWhereUniqueInput {
  id: Int
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createBoard(data: BoardCreateInput!): Board!
  createCard(data: CardCreateInput!): Card!
  createComment(data: CommentCreateInput!): Comment!
  createEvent(data: EventCreateInput!): Event!
  createEvent_admin(data: Event_adminCreateInput!): Event_admin!
  createExpense(data: ExpenseCreateInput!): Expense!
  createList(data: ListCreateInput!): List!
  createReview(data: ReviewCreateInput!): Review!
  createRole(data: RoleCreateInput!): Role!
  createUser(data: UserCreateInput!): User!
  updateBoard(data: BoardUpdateInput!, where: BoardWhereUniqueInput!): Board
  updateCard(data: CardUpdateInput!, where: CardWhereUniqueInput!): Card
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateEvent_admin(data: Event_adminUpdateInput!, where: Event_adminWhereUniqueInput!): Event_admin
  updateExpense(data: ExpenseUpdateInput!, where: ExpenseWhereUniqueInput!): Expense
  updateList(data: ListUpdateInput!, where: ListWhereUniqueInput!): List
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteBoard(where: BoardWhereUniqueInput!): Board
  deleteCard(where: CardWhereUniqueInput!): Card
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvent_admin(where: Event_adminWhereUniqueInput!): Event_admin
  deleteExpense(where: ExpenseWhereUniqueInput!): Expense
  deleteList(where: ListWhereUniqueInput!): List
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteUser(where: UserWhereUniqueInput!): User
  upsertBoard(where: BoardWhereUniqueInput!, create: BoardCreateInput!, update: BoardUpdateInput!): Board!
  upsertCard(where: CardWhereUniqueInput!, create: CardCreateInput!, update: CardUpdateInput!): Card!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertEvent_admin(where: Event_adminWhereUniqueInput!, create: Event_adminCreateInput!, update: Event_adminUpdateInput!): Event_admin!
  upsertExpense(where: ExpenseWhereUniqueInput!, create: ExpenseCreateInput!, update: ExpenseUpdateInput!): Expense!
  upsertList(where: ListWhereUniqueInput!, create: ListCreateInput!, update: ListUpdateInput!): List!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyBoards(data: BoardUpdateManyMutationInput!, where: BoardWhereInput): BatchPayload!
  updateManyCards(data: CardUpdateManyMutationInput!, where: CardWhereInput): BatchPayload!
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  updateManyExpenses(data: ExpenseUpdateManyMutationInput!, where: ExpenseWhereInput): BatchPayload!
  updateManyLists(data: ListUpdateManyMutationInput!, where: ListWhereInput): BatchPayload!
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyBoards(where: BoardWhereInput): BatchPayload!
  deleteManyCards(where: CardWhereInput): BatchPayload!
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  deleteManyEvent_admins(where: Event_adminWhereInput): BatchPayload!
  deleteManyExpenses(where: ExpenseWhereInput): BatchPayload!
  deleteManyLists(where: ListWhereInput): BatchPayload!
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  boards(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board]!
  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card]!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  event_admins(where: Event_adminWhereInput, orderBy: Event_adminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event_admin]!
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense]!
  lists(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [List]!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  board(where: BoardWhereUniqueInput!): Board
  card(where: CardWhereUniqueInput!): Card
  comment(where: CommentWhereUniqueInput!): Comment
  event(where: EventWhereUniqueInput!): Event
  event_admin(where: Event_adminWhereUniqueInput!): Event_admin
  expense(where: ExpenseWhereUniqueInput!): Expense
  list(where: ListWhereUniqueInput!): List
  review(where: ReviewWhereUniqueInput!): Review
  role(where: RoleWhereUniqueInput!): Role
  user(where: UserWhereUniqueInput!): User
  boardsConnection(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BoardConnection!
  cardsConnection(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CardConnection!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  event_adminsConnection(where: Event_adminWhereInput, orderBy: Event_adminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Event_adminConnection!
  expensesConnection(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExpenseConnection!
  listsConnection(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ListConnection!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
}

type Review {
  id: Int!
  created_at: DateTime!
  description: String
  id_events: Event
  id_user: User
  rating: Int!
}

"""A connection to a list of items."""
type ReviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  created_at: DateTime!
  description: String
  rating: Int!
  id_events: EventCreateOneWithoutReviewsInput
  id_user: UserCreateOneWithoutReviewsInput
}

input ReviewCreateManyWithoutId_eventsInput {
  create: [ReviewCreateWithoutId_eventsInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateManyWithoutId_userInput {
  create: [ReviewCreateWithoutId_userInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateWithoutId_eventsInput {
  created_at: DateTime!
  description: String
  rating: Int!
  id_user: UserCreateOneWithoutReviewsInput
}

input ReviewCreateWithoutId_userInput {
  created_at: DateTime!
  description: String
  rating: Int!
  id_events: EventCreateOneWithoutReviewsInput
}

"""An edge in a connection."""
type ReviewEdge {
  """The item at the end of the edge."""
  node: Review!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  created_at_ASC
  created_at_DESC
  description_ASC
  description_DESC
  rating_ASC
  rating_DESC
}

type ReviewPreviousValues {
  id: Int!
  created_at: DateTime!
  description: String
  rating: Int!
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
}

input ReviewUpdateInput {
  created_at: DateTime
  description: String
  rating: Int
  id_events: EventUpdateOneWithoutReviewsInput
  id_user: UserUpdateOneWithoutReviewsInput
}

input ReviewUpdateManyMutationInput {
  created_at: DateTime
  description: String
  rating: Int
}

input ReviewUpdateManyWithoutId_eventsInput {
  create: [ReviewCreateWithoutId_eventsInput!]
  connect: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutId_eventsInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutId_eventsInput!]
}

input ReviewUpdateManyWithoutId_userInput {
  create: [ReviewCreateWithoutId_userInput!]
  connect: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutId_userInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutId_userInput!]
}

input ReviewUpdateWithoutId_eventsDataInput {
  created_at: DateTime
  description: String
  rating: Int
  id_user: UserUpdateOneWithoutReviewsInput
}

input ReviewUpdateWithoutId_userDataInput {
  created_at: DateTime
  description: String
  rating: Int
  id_events: EventUpdateOneWithoutReviewsInput
}

input ReviewUpdateWithWhereUniqueWithoutId_eventsInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutId_eventsDataInput!
}

input ReviewUpdateWithWhereUniqueWithoutId_userInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutId_userDataInput!
}

input ReviewUpsertWithWhereUniqueWithoutId_eventsInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutId_eventsDataInput!
  create: ReviewCreateWithoutId_eventsInput!
}

input ReviewUpsertWithWhereUniqueWithoutId_userInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutId_userDataInput!
  create: ReviewCreateWithoutId_userInput!
}

input ReviewWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  created_at: DateTime

  """All values that are not equal to given value."""
  created_at_not: DateTime

  """All values that are contained in given list."""
  created_at_in: [DateTime!]

  """All values that are not contained in given list."""
  created_at_not_in: [DateTime!]

  """All values less than the given value."""
  created_at_lt: DateTime

  """All values less than or equal the given value."""
  created_at_lte: DateTime

  """All values greater than the given value."""
  created_at_gt: DateTime

  """All values greater than or equal the given value."""
  created_at_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  id_events: EventWhereInput
  id_user: UserWhereInput
}

input ReviewWhereUniqueInput {
  id: Int
}

type Role {
  id: Int!
  event_admins(where: Event_adminWhereInput, orderBy: Event_adminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event_admin!]
  name: String!
}

"""A connection to a list of items."""
type RoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  name: String!
  event_admins: Event_adminCreateManyWithoutId_roleInput
}

input RoleCreateOneWithoutEvent_adminsInput {
  create: RoleCreateWithoutEvent_adminsInput
  connect: RoleWhereUniqueInput
}

input RoleCreateWithoutEvent_adminsInput {
  name: String!
}

"""An edge in a connection."""
type RoleEdge {
  """The item at the end of the edge."""
  node: Role!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type RolePreviousValues {
  id: Int!
  name: String!
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
}

input RoleUpdateInput {
  name: String
  event_admins: Event_adminUpdateManyWithoutId_roleInput
}

input RoleUpdateManyMutationInput {
  name: String
}

input RoleUpdateOneWithoutEvent_adminsInput {
  create: RoleCreateWithoutEvent_adminsInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RoleUpdateWithoutEvent_adminsDataInput
  upsert: RoleUpsertWithoutEvent_adminsInput
}

input RoleUpdateWithoutEvent_adminsDataInput {
  name: String
}

input RoleUpsertWithoutEvent_adminsInput {
  update: RoleUpdateWithoutEvent_adminsDataInput!
  create: RoleCreateWithoutEvent_adminsInput!
}

input RoleWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  event_admins_every: Event_adminWhereInput
  event_admins_some: Event_adminWhereInput
  event_admins_none: Event_adminWhereInput
}

input RoleWhereUniqueInput {
  id: Int
}

type Subscription {
  board(where: BoardSubscriptionWhereInput): BoardSubscriptionPayload
  card(where: CardSubscriptionWhereInput): CardSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  event_admin(where: Event_adminSubscriptionWhereInput): Event_adminSubscriptionPayload
  expense(where: ExpenseSubscriptionWhereInput): ExpenseSubscriptionPayload
  list(where: ListSubscriptionWhereInput): ListSubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: Int!
  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  email: String!
  event_admins(where: Event_adminWhereInput, orderBy: Event_adminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event_admin!]
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense!]
  first_name: String!
  last_name: String!
  password: String!
  phone: Int
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  username: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  first_name: String!
  last_name: String!
  password: String!
  phone: Int
  username: String!
  cards: CardCreateManyWithoutId_userInput
  comments: CommentCreateManyWithoutId_userInput
  event_admins: Event_adminCreateManyWithoutId_userInput
  expenses: ExpenseCreateManyWithoutId_userInput
  reviews: ReviewCreateManyWithoutId_userInput
}

input UserCreateOneWithoutCardsInput {
  create: UserCreateWithoutCardsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEvent_adminsInput {
  create: UserCreateWithoutEvent_adminsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutExpensesInput {
  create: UserCreateWithoutExpensesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCardsInput {
  email: String!
  first_name: String!
  last_name: String!
  password: String!
  phone: Int
  username: String!
  comments: CommentCreateManyWithoutId_userInput
  event_admins: Event_adminCreateManyWithoutId_userInput
  expenses: ExpenseCreateManyWithoutId_userInput
  reviews: ReviewCreateManyWithoutId_userInput
}

input UserCreateWithoutCommentsInput {
  email: String!
  first_name: String!
  last_name: String!
  password: String!
  phone: Int
  username: String!
  cards: CardCreateManyWithoutId_userInput
  event_admins: Event_adminCreateManyWithoutId_userInput
  expenses: ExpenseCreateManyWithoutId_userInput
  reviews: ReviewCreateManyWithoutId_userInput
}

input UserCreateWithoutEvent_adminsInput {
  email: String!
  first_name: String!
  last_name: String!
  password: String!
  phone: Int
  username: String!
  cards: CardCreateManyWithoutId_userInput
  comments: CommentCreateManyWithoutId_userInput
  expenses: ExpenseCreateManyWithoutId_userInput
  reviews: ReviewCreateManyWithoutId_userInput
}

input UserCreateWithoutExpensesInput {
  email: String!
  first_name: String!
  last_name: String!
  password: String!
  phone: Int
  username: String!
  cards: CardCreateManyWithoutId_userInput
  comments: CommentCreateManyWithoutId_userInput
  event_admins: Event_adminCreateManyWithoutId_userInput
  reviews: ReviewCreateManyWithoutId_userInput
}

input UserCreateWithoutReviewsInput {
  email: String!
  first_name: String!
  last_name: String!
  password: String!
  phone: Int
  username: String!
  cards: CardCreateManyWithoutId_userInput
  comments: CommentCreateManyWithoutId_userInput
  event_admins: Event_adminCreateManyWithoutId_userInput
  expenses: ExpenseCreateManyWithoutId_userInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  first_name_ASC
  first_name_DESC
  last_name_ASC
  last_name_DESC
  password_ASC
  password_DESC
  phone_ASC
  phone_DESC
  username_ASC
  username_DESC
}

type UserPreviousValues {
  id: Int!
  email: String!
  first_name: String!
  last_name: String!
  password: String!
  phone: Int
  username: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  first_name: String
  last_name: String
  password: String
  phone: Int
  username: String
  cards: CardUpdateManyWithoutId_userInput
  comments: CommentUpdateManyWithoutId_userInput
  event_admins: Event_adminUpdateManyWithoutId_userInput
  expenses: ExpenseUpdateManyWithoutId_userInput
  reviews: ReviewUpdateManyWithoutId_userInput
}

input UserUpdateManyMutationInput {
  email: String
  first_name: String
  last_name: String
  password: String
  phone: Int
  username: String
}

input UserUpdateOneWithoutCardsInput {
  create: UserCreateWithoutCardsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCardsDataInput
  upsert: UserUpsertWithoutCardsInput
}

input UserUpdateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneWithoutEvent_adminsInput {
  create: UserCreateWithoutEvent_adminsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutEvent_adminsDataInput
  upsert: UserUpsertWithoutEvent_adminsInput
}

input UserUpdateOneWithoutExpensesInput {
  create: UserCreateWithoutExpensesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutExpensesDataInput
  upsert: UserUpsertWithoutExpensesInput
}

input UserUpdateOneWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutReviewsDataInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateWithoutCardsDataInput {
  email: String
  first_name: String
  last_name: String
  password: String
  phone: Int
  username: String
  comments: CommentUpdateManyWithoutId_userInput
  event_admins: Event_adminUpdateManyWithoutId_userInput
  expenses: ExpenseUpdateManyWithoutId_userInput
  reviews: ReviewUpdateManyWithoutId_userInput
}

input UserUpdateWithoutCommentsDataInput {
  email: String
  first_name: String
  last_name: String
  password: String
  phone: Int
  username: String
  cards: CardUpdateManyWithoutId_userInput
  event_admins: Event_adminUpdateManyWithoutId_userInput
  expenses: ExpenseUpdateManyWithoutId_userInput
  reviews: ReviewUpdateManyWithoutId_userInput
}

input UserUpdateWithoutEvent_adminsDataInput {
  email: String
  first_name: String
  last_name: String
  password: String
  phone: Int
  username: String
  cards: CardUpdateManyWithoutId_userInput
  comments: CommentUpdateManyWithoutId_userInput
  expenses: ExpenseUpdateManyWithoutId_userInput
  reviews: ReviewUpdateManyWithoutId_userInput
}

input UserUpdateWithoutExpensesDataInput {
  email: String
  first_name: String
  last_name: String
  password: String
  phone: Int
  username: String
  cards: CardUpdateManyWithoutId_userInput
  comments: CommentUpdateManyWithoutId_userInput
  event_admins: Event_adminUpdateManyWithoutId_userInput
  reviews: ReviewUpdateManyWithoutId_userInput
}

input UserUpdateWithoutReviewsDataInput {
  email: String
  first_name: String
  last_name: String
  password: String
  phone: Int
  username: String
  cards: CardUpdateManyWithoutId_userInput
  comments: CommentUpdateManyWithoutId_userInput
  event_admins: Event_adminUpdateManyWithoutId_userInput
  expenses: ExpenseUpdateManyWithoutId_userInput
}

input UserUpsertWithoutCardsInput {
  update: UserUpdateWithoutCardsDataInput!
  create: UserCreateWithoutCardsInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutEvent_adminsInput {
  update: UserUpdateWithoutEvent_adminsDataInput!
  create: UserCreateWithoutEvent_adminsInput!
}

input UserUpsertWithoutExpensesInput {
  update: UserUpdateWithoutExpensesDataInput!
  create: UserCreateWithoutExpensesInput!
}

input UserUpsertWithoutReviewsInput {
  update: UserUpdateWithoutReviewsDataInput!
  create: UserCreateWithoutReviewsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  first_name: String

  """All values that are not equal to given value."""
  first_name_not: String

  """All values that are contained in given list."""
  first_name_in: [String!]

  """All values that are not contained in given list."""
  first_name_not_in: [String!]

  """All values less than the given value."""
  first_name_lt: String

  """All values less than or equal the given value."""
  first_name_lte: String

  """All values greater than the given value."""
  first_name_gt: String

  """All values greater than or equal the given value."""
  first_name_gte: String

  """All values containing the given string."""
  first_name_contains: String

  """All values not containing the given string."""
  first_name_not_contains: String

  """All values starting with the given string."""
  first_name_starts_with: String

  """All values not starting with the given string."""
  first_name_not_starts_with: String

  """All values ending with the given string."""
  first_name_ends_with: String

  """All values not ending with the given string."""
  first_name_not_ends_with: String
  last_name: String

  """All values that are not equal to given value."""
  last_name_not: String

  """All values that are contained in given list."""
  last_name_in: [String!]

  """All values that are not contained in given list."""
  last_name_not_in: [String!]

  """All values less than the given value."""
  last_name_lt: String

  """All values less than or equal the given value."""
  last_name_lte: String

  """All values greater than the given value."""
  last_name_gt: String

  """All values greater than or equal the given value."""
  last_name_gte: String

  """All values containing the given string."""
  last_name_contains: String

  """All values not containing the given string."""
  last_name_not_contains: String

  """All values starting with the given string."""
  last_name_starts_with: String

  """All values not starting with the given string."""
  last_name_not_starts_with: String

  """All values ending with the given string."""
  last_name_ends_with: String

  """All values not ending with the given string."""
  last_name_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  phone: Int

  """All values that are not equal to given value."""
  phone_not: Int

  """All values that are contained in given list."""
  phone_in: [Int!]

  """All values that are not contained in given list."""
  phone_not_in: [Int!]

  """All values less than the given value."""
  phone_lt: Int

  """All values less than or equal the given value."""
  phone_lte: Int

  """All values greater than the given value."""
  phone_gt: Int

  """All values greater than or equal the given value."""
  phone_gte: Int
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  cards_every: CardWhereInput
  cards_some: CardWhereInput
  cards_none: CardWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  event_admins_every: Event_adminWhereInput
  event_admins_some: Event_adminWhereInput
  event_admins_none: Event_adminWhereInput
  expenses_every: ExpenseWhereInput
  expenses_some: ExpenseWhereInput
  expenses_none: ExpenseWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
}

input UserWhereUniqueInput {
  id: Int
  email: String
  username: String
}
